// Code generated by Prisma (prisma@1.30.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateContest {
  count: Int!
}

type AggregateContestProblem {
  count: Int!
}

type AggregateDiscuss {
  count: Int!
}

type AggregateDiscussChilder {
  count: Int!
}

type AggregatePrivilegeGroup {
  count: Int!
}

type AggregateProblem {
  count: Int!
}

type AggregateSubmit {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserGroup {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Contest {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  type: Int
  cloneId: String
  createUserName: String!
  createUserId: String!
  firstStartTime: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  hint: String
  userGroup(where: UserGroupWhereInput, orderBy: UserGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserGroup!]
  contestProblem(where: ContestProblemWhereInput, orderBy: ContestProblemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContestProblem!]
}

type ContestConnection {
  pageInfo: PageInfo!
  edges: [ContestEdge]!
  aggregate: AggregateContest!
}

input ContestCreateInput {
  name: String!
  type: Int
  cloneId: String
  createUserName: String!
  createUserId: String!
  firstStartTime: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  hint: String
  userGroup: UserGroupCreateManyInput
  contestProblem: ContestProblemCreateManyInput
}

input ContestCreateOneInput {
  create: ContestCreateInput
  connect: ContestWhereUniqueInput
}

type ContestEdge {
  node: Contest!
  cursor: String!
}

enum ContestOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  cloneId_ASC
  cloneId_DESC
  createUserName_ASC
  createUserName_DESC
  createUserId_ASC
  createUserId_DESC
  firstStartTime_ASC
  firstStartTime_DESC
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  hint_ASC
  hint_DESC
}

type ContestPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  type: Int
  cloneId: String
  createUserName: String!
  createUserId: String!
  firstStartTime: DateTime!
  startTime: DateTime!
  endTime: DateTime!
  hint: String
}

type ContestProblem {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  problem: Problem
  problemId: String!
  problemTitle: String!
  ac: Int!
  wa: Int!
}

type ContestProblemConnection {
  pageInfo: PageInfo!
  edges: [ContestProblemEdge]!
  aggregate: AggregateContestProblem!
}

input ContestProblemCreateInput {
  problem: ProblemCreateOneInput
  problemId: String!
  problemTitle: String!
  ac: Int
  wa: Int
}

input ContestProblemCreateManyInput {
  create: [ContestProblemCreateInput!]
  connect: [ContestProblemWhereUniqueInput!]
}

type ContestProblemEdge {
  node: ContestProblem!
  cursor: String!
}

enum ContestProblemOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  problemId_ASC
  problemId_DESC
  problemTitle_ASC
  problemTitle_DESC
  ac_ASC
  ac_DESC
  wa_ASC
  wa_DESC
}

type ContestProblemPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  problemId: String!
  problemTitle: String!
  ac: Int!
  wa: Int!
}

input ContestProblemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  problemId: String
  problemId_not: String
  problemId_in: [String!]
  problemId_not_in: [String!]
  problemId_lt: String
  problemId_lte: String
  problemId_gt: String
  problemId_gte: String
  problemId_contains: String
  problemId_not_contains: String
  problemId_starts_with: String
  problemId_not_starts_with: String
  problemId_ends_with: String
  problemId_not_ends_with: String
  problemTitle: String
  problemTitle_not: String
  problemTitle_in: [String!]
  problemTitle_not_in: [String!]
  problemTitle_lt: String
  problemTitle_lte: String
  problemTitle_gt: String
  problemTitle_gte: String
  problemTitle_contains: String
  problemTitle_not_contains: String
  problemTitle_starts_with: String
  problemTitle_not_starts_with: String
  problemTitle_ends_with: String
  problemTitle_not_ends_with: String
  ac: Int
  ac_not: Int
  ac_in: [Int!]
  ac_not_in: [Int!]
  ac_lt: Int
  ac_lte: Int
  ac_gt: Int
  ac_gte: Int
  wa: Int
  wa_not: Int
  wa_in: [Int!]
  wa_not_in: [Int!]
  wa_lt: Int
  wa_lte: Int
  wa_gt: Int
  wa_gte: Int
  AND: [ContestProblemScalarWhereInput!]
  OR: [ContestProblemScalarWhereInput!]
  NOT: [ContestProblemScalarWhereInput!]
}

type ContestProblemSubscriptionPayload {
  mutation: MutationType!
  node: ContestProblem
  updatedFields: [String!]
  previousValues: ContestProblemPreviousValues
}

input ContestProblemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ContestProblemWhereInput
  AND: [ContestProblemSubscriptionWhereInput!]
  OR: [ContestProblemSubscriptionWhereInput!]
  NOT: [ContestProblemSubscriptionWhereInput!]
}

input ContestProblemUpdateDataInput {
  problem: ProblemUpdateOneInput
  problemId: String
  problemTitle: String
  ac: Int
  wa: Int
}

input ContestProblemUpdateInput {
  problem: ProblemUpdateOneInput
  problemId: String
  problemTitle: String
  ac: Int
  wa: Int
}

input ContestProblemUpdateManyDataInput {
  problemId: String
  problemTitle: String
  ac: Int
  wa: Int
}

input ContestProblemUpdateManyInput {
  create: [ContestProblemCreateInput!]
  update: [ContestProblemUpdateWithWhereUniqueNestedInput!]
  upsert: [ContestProblemUpsertWithWhereUniqueNestedInput!]
  delete: [ContestProblemWhereUniqueInput!]
  connect: [ContestProblemWhereUniqueInput!]
  set: [ContestProblemWhereUniqueInput!]
  disconnect: [ContestProblemWhereUniqueInput!]
  deleteMany: [ContestProblemScalarWhereInput!]
  updateMany: [ContestProblemUpdateManyWithWhereNestedInput!]
}

input ContestProblemUpdateManyMutationInput {
  problemId: String
  problemTitle: String
  ac: Int
  wa: Int
}

input ContestProblemUpdateManyWithWhereNestedInput {
  where: ContestProblemScalarWhereInput!
  data: ContestProblemUpdateManyDataInput!
}

input ContestProblemUpdateWithWhereUniqueNestedInput {
  where: ContestProblemWhereUniqueInput!
  data: ContestProblemUpdateDataInput!
}

input ContestProblemUpsertWithWhereUniqueNestedInput {
  where: ContestProblemWhereUniqueInput!
  update: ContestProblemUpdateDataInput!
  create: ContestProblemCreateInput!
}

input ContestProblemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  problem: ProblemWhereInput
  problemId: String
  problemId_not: String
  problemId_in: [String!]
  problemId_not_in: [String!]
  problemId_lt: String
  problemId_lte: String
  problemId_gt: String
  problemId_gte: String
  problemId_contains: String
  problemId_not_contains: String
  problemId_starts_with: String
  problemId_not_starts_with: String
  problemId_ends_with: String
  problemId_not_ends_with: String
  problemTitle: String
  problemTitle_not: String
  problemTitle_in: [String!]
  problemTitle_not_in: [String!]
  problemTitle_lt: String
  problemTitle_lte: String
  problemTitle_gt: String
  problemTitle_gte: String
  problemTitle_contains: String
  problemTitle_not_contains: String
  problemTitle_starts_with: String
  problemTitle_not_starts_with: String
  problemTitle_ends_with: String
  problemTitle_not_ends_with: String
  ac: Int
  ac_not: Int
  ac_in: [Int!]
  ac_not_in: [Int!]
  ac_lt: Int
  ac_lte: Int
  ac_gt: Int
  ac_gte: Int
  wa: Int
  wa_not: Int
  wa_in: [Int!]
  wa_not_in: [Int!]
  wa_lt: Int
  wa_lte: Int
  wa_gt: Int
  wa_gte: Int
  AND: [ContestProblemWhereInput!]
  OR: [ContestProblemWhereInput!]
  NOT: [ContestProblemWhereInput!]
}

input ContestProblemWhereUniqueInput {
  id: ID
}

type ContestSubscriptionPayload {
  mutation: MutationType!
  node: Contest
  updatedFields: [String!]
  previousValues: ContestPreviousValues
}

input ContestSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ContestWhereInput
  AND: [ContestSubscriptionWhereInput!]
  OR: [ContestSubscriptionWhereInput!]
  NOT: [ContestSubscriptionWhereInput!]
}

input ContestUpdateDataInput {
  name: String
  type: Int
  cloneId: String
  createUserName: String
  createUserId: String
  firstStartTime: DateTime
  startTime: DateTime
  endTime: DateTime
  hint: String
  userGroup: UserGroupUpdateManyInput
  contestProblem: ContestProblemUpdateManyInput
}

input ContestUpdateInput {
  name: String
  type: Int
  cloneId: String
  createUserName: String
  createUserId: String
  firstStartTime: DateTime
  startTime: DateTime
  endTime: DateTime
  hint: String
  userGroup: UserGroupUpdateManyInput
  contestProblem: ContestProblemUpdateManyInput
}

input ContestUpdateManyMutationInput {
  name: String
  type: Int
  cloneId: String
  createUserName: String
  createUserId: String
  firstStartTime: DateTime
  startTime: DateTime
  endTime: DateTime
  hint: String
}

input ContestUpdateOneInput {
  create: ContestCreateInput
  update: ContestUpdateDataInput
  upsert: ContestUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ContestWhereUniqueInput
}

input ContestUpsertNestedInput {
  update: ContestUpdateDataInput!
  create: ContestCreateInput!
}

input ContestWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  type: Int
  type_not: Int
  type_in: [Int!]
  type_not_in: [Int!]
  type_lt: Int
  type_lte: Int
  type_gt: Int
  type_gte: Int
  cloneId: String
  cloneId_not: String
  cloneId_in: [String!]
  cloneId_not_in: [String!]
  cloneId_lt: String
  cloneId_lte: String
  cloneId_gt: String
  cloneId_gte: String
  cloneId_contains: String
  cloneId_not_contains: String
  cloneId_starts_with: String
  cloneId_not_starts_with: String
  cloneId_ends_with: String
  cloneId_not_ends_with: String
  createUserName: String
  createUserName_not: String
  createUserName_in: [String!]
  createUserName_not_in: [String!]
  createUserName_lt: String
  createUserName_lte: String
  createUserName_gt: String
  createUserName_gte: String
  createUserName_contains: String
  createUserName_not_contains: String
  createUserName_starts_with: String
  createUserName_not_starts_with: String
  createUserName_ends_with: String
  createUserName_not_ends_with: String
  createUserId: String
  createUserId_not: String
  createUserId_in: [String!]
  createUserId_not_in: [String!]
  createUserId_lt: String
  createUserId_lte: String
  createUserId_gt: String
  createUserId_gte: String
  createUserId_contains: String
  createUserId_not_contains: String
  createUserId_starts_with: String
  createUserId_not_starts_with: String
  createUserId_ends_with: String
  createUserId_not_ends_with: String
  firstStartTime: DateTime
  firstStartTime_not: DateTime
  firstStartTime_in: [DateTime!]
  firstStartTime_not_in: [DateTime!]
  firstStartTime_lt: DateTime
  firstStartTime_lte: DateTime
  firstStartTime_gt: DateTime
  firstStartTime_gte: DateTime
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  endTime: DateTime
  endTime_not: DateTime
  endTime_in: [DateTime!]
  endTime_not_in: [DateTime!]
  endTime_lt: DateTime
  endTime_lte: DateTime
  endTime_gt: DateTime
  endTime_gte: DateTime
  hint: String
  hint_not: String
  hint_in: [String!]
  hint_not_in: [String!]
  hint_lt: String
  hint_lte: String
  hint_gt: String
  hint_gte: String
  hint_contains: String
  hint_not_contains: String
  hint_starts_with: String
  hint_not_starts_with: String
  hint_ends_with: String
  hint_not_ends_with: String
  userGroup_every: UserGroupWhereInput
  userGroup_some: UserGroupWhereInput
  userGroup_none: UserGroupWhereInput
  contestProblem_every: ContestProblemWhereInput
  contestProblem_some: ContestProblemWhereInput
  contestProblem_none: ContestProblemWhereInput
  AND: [ContestWhereInput!]
  OR: [ContestWhereInput!]
  NOT: [ContestWhereInput!]
}

input ContestWhereUniqueInput {
  id: ID
}

scalar DateTime

type Discuss {
  problemId: String
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  contentRaw: String!
  content: String!
  user: User
  userId: String!
  userName: String!
  children(where: DiscussChilderWhereInput, orderBy: DiscussChilderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DiscussChilder!]
}

type DiscussChilder {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  contentRaw: String!
  content: String!
  user: User
  userId: Int!
  userName: String!
  replyUserId: Int!
  replyUserName: String!
}

type DiscussChilderConnection {
  pageInfo: PageInfo!
  edges: [DiscussChilderEdge]!
  aggregate: AggregateDiscussChilder!
}

input DiscussChilderCreateInput {
  contentRaw: String!
  content: String!
  user: UserCreateOneWithoutUserDiscussChilderInput
  userId: Int!
  userName: String!
  replyUserId: Int!
  replyUserName: String!
}

input DiscussChilderCreateManyInput {
  create: [DiscussChilderCreateInput!]
  connect: [DiscussChilderWhereUniqueInput!]
}

input DiscussChilderCreateManyWithoutUserInput {
  create: [DiscussChilderCreateWithoutUserInput!]
  connect: [DiscussChilderWhereUniqueInput!]
}

input DiscussChilderCreateWithoutUserInput {
  contentRaw: String!
  content: String!
  userId: Int!
  userName: String!
  replyUserId: Int!
  replyUserName: String!
}

type DiscussChilderEdge {
  node: DiscussChilder!
  cursor: String!
}

enum DiscussChilderOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  contentRaw_ASC
  contentRaw_DESC
  content_ASC
  content_DESC
  userId_ASC
  userId_DESC
  userName_ASC
  userName_DESC
  replyUserId_ASC
  replyUserId_DESC
  replyUserName_ASC
  replyUserName_DESC
}

type DiscussChilderPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  contentRaw: String!
  content: String!
  userId: Int!
  userName: String!
  replyUserId: Int!
  replyUserName: String!
}

input DiscussChilderScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  contentRaw: String
  contentRaw_not: String
  contentRaw_in: [String!]
  contentRaw_not_in: [String!]
  contentRaw_lt: String
  contentRaw_lte: String
  contentRaw_gt: String
  contentRaw_gte: String
  contentRaw_contains: String
  contentRaw_not_contains: String
  contentRaw_starts_with: String
  contentRaw_not_starts_with: String
  contentRaw_ends_with: String
  contentRaw_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  userId: Int
  userId_not: Int
  userId_in: [Int!]
  userId_not_in: [Int!]
  userId_lt: Int
  userId_lte: Int
  userId_gt: Int
  userId_gte: Int
  userName: String
  userName_not: String
  userName_in: [String!]
  userName_not_in: [String!]
  userName_lt: String
  userName_lte: String
  userName_gt: String
  userName_gte: String
  userName_contains: String
  userName_not_contains: String
  userName_starts_with: String
  userName_not_starts_with: String
  userName_ends_with: String
  userName_not_ends_with: String
  replyUserId: Int
  replyUserId_not: Int
  replyUserId_in: [Int!]
  replyUserId_not_in: [Int!]
  replyUserId_lt: Int
  replyUserId_lte: Int
  replyUserId_gt: Int
  replyUserId_gte: Int
  replyUserName: String
  replyUserName_not: String
  replyUserName_in: [String!]
  replyUserName_not_in: [String!]
  replyUserName_lt: String
  replyUserName_lte: String
  replyUserName_gt: String
  replyUserName_gte: String
  replyUserName_contains: String
  replyUserName_not_contains: String
  replyUserName_starts_with: String
  replyUserName_not_starts_with: String
  replyUserName_ends_with: String
  replyUserName_not_ends_with: String
  AND: [DiscussChilderScalarWhereInput!]
  OR: [DiscussChilderScalarWhereInput!]
  NOT: [DiscussChilderScalarWhereInput!]
}

type DiscussChilderSubscriptionPayload {
  mutation: MutationType!
  node: DiscussChilder
  updatedFields: [String!]
  previousValues: DiscussChilderPreviousValues
}

input DiscussChilderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DiscussChilderWhereInput
  AND: [DiscussChilderSubscriptionWhereInput!]
  OR: [DiscussChilderSubscriptionWhereInput!]
  NOT: [DiscussChilderSubscriptionWhereInput!]
}

input DiscussChilderUpdateDataInput {
  contentRaw: String
  content: String
  user: UserUpdateOneWithoutUserDiscussChilderInput
  userId: Int
  userName: String
  replyUserId: Int
  replyUserName: String
}

input DiscussChilderUpdateInput {
  contentRaw: String
  content: String
  user: UserUpdateOneWithoutUserDiscussChilderInput
  userId: Int
  userName: String
  replyUserId: Int
  replyUserName: String
}

input DiscussChilderUpdateManyDataInput {
  contentRaw: String
  content: String
  userId: Int
  userName: String
  replyUserId: Int
  replyUserName: String
}

input DiscussChilderUpdateManyInput {
  create: [DiscussChilderCreateInput!]
  update: [DiscussChilderUpdateWithWhereUniqueNestedInput!]
  upsert: [DiscussChilderUpsertWithWhereUniqueNestedInput!]
  delete: [DiscussChilderWhereUniqueInput!]
  connect: [DiscussChilderWhereUniqueInput!]
  set: [DiscussChilderWhereUniqueInput!]
  disconnect: [DiscussChilderWhereUniqueInput!]
  deleteMany: [DiscussChilderScalarWhereInput!]
  updateMany: [DiscussChilderUpdateManyWithWhereNestedInput!]
}

input DiscussChilderUpdateManyMutationInput {
  contentRaw: String
  content: String
  userId: Int
  userName: String
  replyUserId: Int
  replyUserName: String
}

input DiscussChilderUpdateManyWithoutUserInput {
  create: [DiscussChilderCreateWithoutUserInput!]
  delete: [DiscussChilderWhereUniqueInput!]
  connect: [DiscussChilderWhereUniqueInput!]
  set: [DiscussChilderWhereUniqueInput!]
  disconnect: [DiscussChilderWhereUniqueInput!]
  update: [DiscussChilderUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [DiscussChilderUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [DiscussChilderScalarWhereInput!]
  updateMany: [DiscussChilderUpdateManyWithWhereNestedInput!]
}

input DiscussChilderUpdateManyWithWhereNestedInput {
  where: DiscussChilderScalarWhereInput!
  data: DiscussChilderUpdateManyDataInput!
}

input DiscussChilderUpdateWithoutUserDataInput {
  contentRaw: String
  content: String
  userId: Int
  userName: String
  replyUserId: Int
  replyUserName: String
}

input DiscussChilderUpdateWithWhereUniqueNestedInput {
  where: DiscussChilderWhereUniqueInput!
  data: DiscussChilderUpdateDataInput!
}

input DiscussChilderUpdateWithWhereUniqueWithoutUserInput {
  where: DiscussChilderWhereUniqueInput!
  data: DiscussChilderUpdateWithoutUserDataInput!
}

input DiscussChilderUpsertWithWhereUniqueNestedInput {
  where: DiscussChilderWhereUniqueInput!
  update: DiscussChilderUpdateDataInput!
  create: DiscussChilderCreateInput!
}

input DiscussChilderUpsertWithWhereUniqueWithoutUserInput {
  where: DiscussChilderWhereUniqueInput!
  update: DiscussChilderUpdateWithoutUserDataInput!
  create: DiscussChilderCreateWithoutUserInput!
}

input DiscussChilderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  contentRaw: String
  contentRaw_not: String
  contentRaw_in: [String!]
  contentRaw_not_in: [String!]
  contentRaw_lt: String
  contentRaw_lte: String
  contentRaw_gt: String
  contentRaw_gte: String
  contentRaw_contains: String
  contentRaw_not_contains: String
  contentRaw_starts_with: String
  contentRaw_not_starts_with: String
  contentRaw_ends_with: String
  contentRaw_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  user: UserWhereInput
  userId: Int
  userId_not: Int
  userId_in: [Int!]
  userId_not_in: [Int!]
  userId_lt: Int
  userId_lte: Int
  userId_gt: Int
  userId_gte: Int
  userName: String
  userName_not: String
  userName_in: [String!]
  userName_not_in: [String!]
  userName_lt: String
  userName_lte: String
  userName_gt: String
  userName_gte: String
  userName_contains: String
  userName_not_contains: String
  userName_starts_with: String
  userName_not_starts_with: String
  userName_ends_with: String
  userName_not_ends_with: String
  replyUserId: Int
  replyUserId_not: Int
  replyUserId_in: [Int!]
  replyUserId_not_in: [Int!]
  replyUserId_lt: Int
  replyUserId_lte: Int
  replyUserId_gt: Int
  replyUserId_gte: Int
  replyUserName: String
  replyUserName_not: String
  replyUserName_in: [String!]
  replyUserName_not_in: [String!]
  replyUserName_lt: String
  replyUserName_lte: String
  replyUserName_gt: String
  replyUserName_gte: String
  replyUserName_contains: String
  replyUserName_not_contains: String
  replyUserName_starts_with: String
  replyUserName_not_starts_with: String
  replyUserName_ends_with: String
  replyUserName_not_ends_with: String
  AND: [DiscussChilderWhereInput!]
  OR: [DiscussChilderWhereInput!]
  NOT: [DiscussChilderWhereInput!]
}

input DiscussChilderWhereUniqueInput {
  id: ID
}

type DiscussConnection {
  pageInfo: PageInfo!
  edges: [DiscussEdge]!
  aggregate: AggregateDiscuss!
}

input DiscussCreateInput {
  problemId: String
  contentRaw: String!
  content: String!
  user: UserCreateOneWithoutUserDiscussInput
  userId: String!
  userName: String!
  children: DiscussChilderCreateManyInput
}

input DiscussCreateManyInput {
  create: [DiscussCreateInput!]
  connect: [DiscussWhereUniqueInput!]
}

input DiscussCreateManyWithoutUserInput {
  create: [DiscussCreateWithoutUserInput!]
  connect: [DiscussWhereUniqueInput!]
}

input DiscussCreateWithoutUserInput {
  problemId: String
  contentRaw: String!
  content: String!
  userId: String!
  userName: String!
  children: DiscussChilderCreateManyInput
}

type DiscussEdge {
  node: Discuss!
  cursor: String!
}

enum DiscussOrderByInput {
  problemId_ASC
  problemId_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  contentRaw_ASC
  contentRaw_DESC
  content_ASC
  content_DESC
  userId_ASC
  userId_DESC
  userName_ASC
  userName_DESC
}

type DiscussPreviousValues {
  problemId: String
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  contentRaw: String!
  content: String!
  userId: String!
  userName: String!
}

input DiscussScalarWhereInput {
  problemId: String
  problemId_not: String
  problemId_in: [String!]
  problemId_not_in: [String!]
  problemId_lt: String
  problemId_lte: String
  problemId_gt: String
  problemId_gte: String
  problemId_contains: String
  problemId_not_contains: String
  problemId_starts_with: String
  problemId_not_starts_with: String
  problemId_ends_with: String
  problemId_not_ends_with: String
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  contentRaw: String
  contentRaw_not: String
  contentRaw_in: [String!]
  contentRaw_not_in: [String!]
  contentRaw_lt: String
  contentRaw_lte: String
  contentRaw_gt: String
  contentRaw_gte: String
  contentRaw_contains: String
  contentRaw_not_contains: String
  contentRaw_starts_with: String
  contentRaw_not_starts_with: String
  contentRaw_ends_with: String
  contentRaw_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  userId: String
  userId_not: String
  userId_in: [String!]
  userId_not_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_gt: String
  userId_gte: String
  userId_contains: String
  userId_not_contains: String
  userId_starts_with: String
  userId_not_starts_with: String
  userId_ends_with: String
  userId_not_ends_with: String
  userName: String
  userName_not: String
  userName_in: [String!]
  userName_not_in: [String!]
  userName_lt: String
  userName_lte: String
  userName_gt: String
  userName_gte: String
  userName_contains: String
  userName_not_contains: String
  userName_starts_with: String
  userName_not_starts_with: String
  userName_ends_with: String
  userName_not_ends_with: String
  AND: [DiscussScalarWhereInput!]
  OR: [DiscussScalarWhereInput!]
  NOT: [DiscussScalarWhereInput!]
}

type DiscussSubscriptionPayload {
  mutation: MutationType!
  node: Discuss
  updatedFields: [String!]
  previousValues: DiscussPreviousValues
}

input DiscussSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DiscussWhereInput
  AND: [DiscussSubscriptionWhereInput!]
  OR: [DiscussSubscriptionWhereInput!]
  NOT: [DiscussSubscriptionWhereInput!]
}

input DiscussUpdateDataInput {
  problemId: String
  contentRaw: String
  content: String
  user: UserUpdateOneWithoutUserDiscussInput
  userId: String
  userName: String
  children: DiscussChilderUpdateManyInput
}

input DiscussUpdateInput {
  problemId: String
  contentRaw: String
  content: String
  user: UserUpdateOneWithoutUserDiscussInput
  userId: String
  userName: String
  children: DiscussChilderUpdateManyInput
}

input DiscussUpdateManyDataInput {
  problemId: String
  contentRaw: String
  content: String
  userId: String
  userName: String
}

input DiscussUpdateManyInput {
  create: [DiscussCreateInput!]
  update: [DiscussUpdateWithWhereUniqueNestedInput!]
  upsert: [DiscussUpsertWithWhereUniqueNestedInput!]
  delete: [DiscussWhereUniqueInput!]
  connect: [DiscussWhereUniqueInput!]
  set: [DiscussWhereUniqueInput!]
  disconnect: [DiscussWhereUniqueInput!]
  deleteMany: [DiscussScalarWhereInput!]
  updateMany: [DiscussUpdateManyWithWhereNestedInput!]
}

input DiscussUpdateManyMutationInput {
  problemId: String
  contentRaw: String
  content: String
  userId: String
  userName: String
}

input DiscussUpdateManyWithoutUserInput {
  create: [DiscussCreateWithoutUserInput!]
  delete: [DiscussWhereUniqueInput!]
  connect: [DiscussWhereUniqueInput!]
  set: [DiscussWhereUniqueInput!]
  disconnect: [DiscussWhereUniqueInput!]
  update: [DiscussUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [DiscussUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [DiscussScalarWhereInput!]
  updateMany: [DiscussUpdateManyWithWhereNestedInput!]
}

input DiscussUpdateManyWithWhereNestedInput {
  where: DiscussScalarWhereInput!
  data: DiscussUpdateManyDataInput!
}

input DiscussUpdateWithoutUserDataInput {
  problemId: String
  contentRaw: String
  content: String
  userId: String
  userName: String
  children: DiscussChilderUpdateManyInput
}

input DiscussUpdateWithWhereUniqueNestedInput {
  where: DiscussWhereUniqueInput!
  data: DiscussUpdateDataInput!
}

input DiscussUpdateWithWhereUniqueWithoutUserInput {
  where: DiscussWhereUniqueInput!
  data: DiscussUpdateWithoutUserDataInput!
}

input DiscussUpsertWithWhereUniqueNestedInput {
  where: DiscussWhereUniqueInput!
  update: DiscussUpdateDataInput!
  create: DiscussCreateInput!
}

input DiscussUpsertWithWhereUniqueWithoutUserInput {
  where: DiscussWhereUniqueInput!
  update: DiscussUpdateWithoutUserDataInput!
  create: DiscussCreateWithoutUserInput!
}

input DiscussWhereInput {
  problemId: String
  problemId_not: String
  problemId_in: [String!]
  problemId_not_in: [String!]
  problemId_lt: String
  problemId_lte: String
  problemId_gt: String
  problemId_gte: String
  problemId_contains: String
  problemId_not_contains: String
  problemId_starts_with: String
  problemId_not_starts_with: String
  problemId_ends_with: String
  problemId_not_ends_with: String
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  contentRaw: String
  contentRaw_not: String
  contentRaw_in: [String!]
  contentRaw_not_in: [String!]
  contentRaw_lt: String
  contentRaw_lte: String
  contentRaw_gt: String
  contentRaw_gte: String
  contentRaw_contains: String
  contentRaw_not_contains: String
  contentRaw_starts_with: String
  contentRaw_not_starts_with: String
  contentRaw_ends_with: String
  contentRaw_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  user: UserWhereInput
  userId: String
  userId_not: String
  userId_in: [String!]
  userId_not_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_gt: String
  userId_gte: String
  userId_contains: String
  userId_not_contains: String
  userId_starts_with: String
  userId_not_starts_with: String
  userId_ends_with: String
  userId_not_ends_with: String
  userName: String
  userName_not: String
  userName_in: [String!]
  userName_not_in: [String!]
  userName_lt: String
  userName_lte: String
  userName_gt: String
  userName_gte: String
  userName_contains: String
  userName_not_contains: String
  userName_starts_with: String
  userName_not_starts_with: String
  userName_ends_with: String
  userName_not_ends_with: String
  children_every: DiscussChilderWhereInput
  children_some: DiscussChilderWhereInput
  children_none: DiscussChilderWhereInput
  AND: [DiscussWhereInput!]
  OR: [DiscussWhereInput!]
  NOT: [DiscussWhereInput!]
}

input DiscussWhereUniqueInput {
  id: ID
}

scalar Json

scalar Long

type Mutation {
  createContest(data: ContestCreateInput!): Contest!
  updateContest(data: ContestUpdateInput!, where: ContestWhereUniqueInput!): Contest
  updateManyContests(data: ContestUpdateManyMutationInput!, where: ContestWhereInput): BatchPayload!
  upsertContest(where: ContestWhereUniqueInput!, create: ContestCreateInput!, update: ContestUpdateInput!): Contest!
  deleteContest(where: ContestWhereUniqueInput!): Contest
  deleteManyContests(where: ContestWhereInput): BatchPayload!
  createContestProblem(data: ContestProblemCreateInput!): ContestProblem!
  updateContestProblem(data: ContestProblemUpdateInput!, where: ContestProblemWhereUniqueInput!): ContestProblem
  updateManyContestProblems(data: ContestProblemUpdateManyMutationInput!, where: ContestProblemWhereInput): BatchPayload!
  upsertContestProblem(where: ContestProblemWhereUniqueInput!, create: ContestProblemCreateInput!, update: ContestProblemUpdateInput!): ContestProblem!
  deleteContestProblem(where: ContestProblemWhereUniqueInput!): ContestProblem
  deleteManyContestProblems(where: ContestProblemWhereInput): BatchPayload!
  createDiscuss(data: DiscussCreateInput!): Discuss!
  updateDiscuss(data: DiscussUpdateInput!, where: DiscussWhereUniqueInput!): Discuss
  updateManyDiscusses(data: DiscussUpdateManyMutationInput!, where: DiscussWhereInput): BatchPayload!
  upsertDiscuss(where: DiscussWhereUniqueInput!, create: DiscussCreateInput!, update: DiscussUpdateInput!): Discuss!
  deleteDiscuss(where: DiscussWhereUniqueInput!): Discuss
  deleteManyDiscusses(where: DiscussWhereInput): BatchPayload!
  createDiscussChilder(data: DiscussChilderCreateInput!): DiscussChilder!
  updateDiscussChilder(data: DiscussChilderUpdateInput!, where: DiscussChilderWhereUniqueInput!): DiscussChilder
  updateManyDiscussChilders(data: DiscussChilderUpdateManyMutationInput!, where: DiscussChilderWhereInput): BatchPayload!
  upsertDiscussChilder(where: DiscussChilderWhereUniqueInput!, create: DiscussChilderCreateInput!, update: DiscussChilderUpdateInput!): DiscussChilder!
  deleteDiscussChilder(where: DiscussChilderWhereUniqueInput!): DiscussChilder
  deleteManyDiscussChilders(where: DiscussChilderWhereInput): BatchPayload!
  createPrivilegeGroup(data: PrivilegeGroupCreateInput!): PrivilegeGroup!
  updatePrivilegeGroup(data: PrivilegeGroupUpdateInput!, where: PrivilegeGroupWhereUniqueInput!): PrivilegeGroup
  updateManyPrivilegeGroups(data: PrivilegeGroupUpdateManyMutationInput!, where: PrivilegeGroupWhereInput): BatchPayload!
  upsertPrivilegeGroup(where: PrivilegeGroupWhereUniqueInput!, create: PrivilegeGroupCreateInput!, update: PrivilegeGroupUpdateInput!): PrivilegeGroup!
  deletePrivilegeGroup(where: PrivilegeGroupWhereUniqueInput!): PrivilegeGroup
  deleteManyPrivilegeGroups(where: PrivilegeGroupWhereInput): BatchPayload!
  createProblem(data: ProblemCreateInput!): Problem!
  updateProblem(data: ProblemUpdateInput!, where: ProblemWhereUniqueInput!): Problem
  updateManyProblems(data: ProblemUpdateManyMutationInput!, where: ProblemWhereInput): BatchPayload!
  upsertProblem(where: ProblemWhereUniqueInput!, create: ProblemCreateInput!, update: ProblemUpdateInput!): Problem!
  deleteProblem(where: ProblemWhereUniqueInput!): Problem
  deleteManyProblems(where: ProblemWhereInput): BatchPayload!
  createSubmit(data: SubmitCreateInput!): Submit!
  updateSubmit(data: SubmitUpdateInput!, where: SubmitWhereUniqueInput!): Submit
  updateManySubmits(data: SubmitUpdateManyMutationInput!, where: SubmitWhereInput): BatchPayload!
  upsertSubmit(where: SubmitWhereUniqueInput!, create: SubmitCreateInput!, update: SubmitUpdateInput!): Submit!
  deleteSubmit(where: SubmitWhereUniqueInput!): Submit
  deleteManySubmits(where: SubmitWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUserGroup(data: UserGroupCreateInput!): UserGroup!
  updateUserGroup(data: UserGroupUpdateInput!, where: UserGroupWhereUniqueInput!): UserGroup
  updateManyUserGroups(data: UserGroupUpdateManyMutationInput!, where: UserGroupWhereInput): BatchPayload!
  upsertUserGroup(where: UserGroupWhereUniqueInput!, create: UserGroupCreateInput!, update: UserGroupUpdateInput!): UserGroup!
  deleteUserGroup(where: UserGroupWhereUniqueInput!): UserGroup
  deleteManyUserGroups(where: UserGroupWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PrivilegeGroup {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  privilege: Int!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type PrivilegeGroupConnection {
  pageInfo: PageInfo!
  edges: [PrivilegeGroupEdge]!
  aggregate: AggregatePrivilegeGroup!
}

input PrivilegeGroupCreateInput {
  name: String!
  privilege: Int!
  users: UserCreateManyWithoutPrivilegeGroupInput
}

input PrivilegeGroupCreateManyWithoutUsersInput {
  create: [PrivilegeGroupCreateWithoutUsersInput!]
  connect: [PrivilegeGroupWhereUniqueInput!]
}

input PrivilegeGroupCreateWithoutUsersInput {
  name: String!
  privilege: Int!
}

type PrivilegeGroupEdge {
  node: PrivilegeGroup!
  cursor: String!
}

enum PrivilegeGroupOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  privilege_ASC
  privilege_DESC
}

type PrivilegeGroupPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  privilege: Int!
}

input PrivilegeGroupScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  privilege: Int
  privilege_not: Int
  privilege_in: [Int!]
  privilege_not_in: [Int!]
  privilege_lt: Int
  privilege_lte: Int
  privilege_gt: Int
  privilege_gte: Int
  AND: [PrivilegeGroupScalarWhereInput!]
  OR: [PrivilegeGroupScalarWhereInput!]
  NOT: [PrivilegeGroupScalarWhereInput!]
}

type PrivilegeGroupSubscriptionPayload {
  mutation: MutationType!
  node: PrivilegeGroup
  updatedFields: [String!]
  previousValues: PrivilegeGroupPreviousValues
}

input PrivilegeGroupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PrivilegeGroupWhereInput
  AND: [PrivilegeGroupSubscriptionWhereInput!]
  OR: [PrivilegeGroupSubscriptionWhereInput!]
  NOT: [PrivilegeGroupSubscriptionWhereInput!]
}

input PrivilegeGroupUpdateInput {
  name: String
  privilege: Int
  users: UserUpdateManyWithoutPrivilegeGroupInput
}

input PrivilegeGroupUpdateManyDataInput {
  name: String
  privilege: Int
}

input PrivilegeGroupUpdateManyMutationInput {
  name: String
  privilege: Int
}

input PrivilegeGroupUpdateManyWithoutUsersInput {
  create: [PrivilegeGroupCreateWithoutUsersInput!]
  delete: [PrivilegeGroupWhereUniqueInput!]
  connect: [PrivilegeGroupWhereUniqueInput!]
  set: [PrivilegeGroupWhereUniqueInput!]
  disconnect: [PrivilegeGroupWhereUniqueInput!]
  update: [PrivilegeGroupUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [PrivilegeGroupUpsertWithWhereUniqueWithoutUsersInput!]
  deleteMany: [PrivilegeGroupScalarWhereInput!]
  updateMany: [PrivilegeGroupUpdateManyWithWhereNestedInput!]
}

input PrivilegeGroupUpdateManyWithWhereNestedInput {
  where: PrivilegeGroupScalarWhereInput!
  data: PrivilegeGroupUpdateManyDataInput!
}

input PrivilegeGroupUpdateWithoutUsersDataInput {
  name: String
  privilege: Int
}

input PrivilegeGroupUpdateWithWhereUniqueWithoutUsersInput {
  where: PrivilegeGroupWhereUniqueInput!
  data: PrivilegeGroupUpdateWithoutUsersDataInput!
}

input PrivilegeGroupUpsertWithWhereUniqueWithoutUsersInput {
  where: PrivilegeGroupWhereUniqueInput!
  update: PrivilegeGroupUpdateWithoutUsersDataInput!
  create: PrivilegeGroupCreateWithoutUsersInput!
}

input PrivilegeGroupWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  privilege: Int
  privilege_not: Int
  privilege_in: [Int!]
  privilege_not_in: [Int!]
  privilege_lt: Int
  privilege_lte: Int
  privilege_gt: Int
  privilege_gte: Int
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  AND: [PrivilegeGroupWhereInput!]
  OR: [PrivilegeGroupWhereInput!]
  NOT: [PrivilegeGroupWhereInput!]
}

input PrivilegeGroupWhereUniqueInput {
  id: ID
}

type Problem {
  id: ID!
  problemId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  status: Int!
  type: Int!
  tags: Json!
  title: String!
  describe: String!
  inDescribe: String!
  outDescribe: String!
  inExample: String!
  outExample: String!
  integral: Int
  limitTime: Int!
  limitMemory: Int!
  submit: Int!
  solved: Int!
  createUser: User
  hint: String
  source: String
  sourceId: String
  example: String
  discuss(where: DiscussWhereInput, orderBy: DiscussOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Discuss!]
}

type ProblemConnection {
  pageInfo: PageInfo!
  edges: [ProblemEdge]!
  aggregate: AggregateProblem!
}

input ProblemCreateInput {
  problemId: Int
  status: Int
  type: Int
  tags: Json!
  title: String!
  describe: String!
  inDescribe: String!
  outDescribe: String!
  inExample: String!
  outExample: String!
  integral: Int
  limitTime: Int!
  limitMemory: Int!
  submit: Int
  solved: Int
  createUser: UserCreateOneWithoutCreateProblmesInput
  hint: String
  source: String
  sourceId: String
  example: String
  discuss: DiscussCreateManyInput
}

input ProblemCreateManyWithoutCreateUserInput {
  create: [ProblemCreateWithoutCreateUserInput!]
  connect: [ProblemWhereUniqueInput!]
}

input ProblemCreateOneInput {
  create: ProblemCreateInput
  connect: ProblemWhereUniqueInput
}

input ProblemCreateWithoutCreateUserInput {
  problemId: Int
  status: Int
  type: Int
  tags: Json!
  title: String!
  describe: String!
  inDescribe: String!
  outDescribe: String!
  inExample: String!
  outExample: String!
  integral: Int
  limitTime: Int!
  limitMemory: Int!
  submit: Int
  solved: Int
  hint: String
  source: String
  sourceId: String
  example: String
  discuss: DiscussCreateManyInput
}

type ProblemEdge {
  node: Problem!
  cursor: String!
}

enum ProblemOrderByInput {
  id_ASC
  id_DESC
  problemId_ASC
  problemId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  status_ASC
  status_DESC
  type_ASC
  type_DESC
  tags_ASC
  tags_DESC
  title_ASC
  title_DESC
  describe_ASC
  describe_DESC
  inDescribe_ASC
  inDescribe_DESC
  outDescribe_ASC
  outDescribe_DESC
  inExample_ASC
  inExample_DESC
  outExample_ASC
  outExample_DESC
  integral_ASC
  integral_DESC
  limitTime_ASC
  limitTime_DESC
  limitMemory_ASC
  limitMemory_DESC
  submit_ASC
  submit_DESC
  solved_ASC
  solved_DESC
  hint_ASC
  hint_DESC
  source_ASC
  source_DESC
  sourceId_ASC
  sourceId_DESC
  example_ASC
  example_DESC
}

type ProblemPreviousValues {
  id: ID!
  problemId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  status: Int!
  type: Int!
  tags: Json!
  title: String!
  describe: String!
  inDescribe: String!
  outDescribe: String!
  inExample: String!
  outExample: String!
  integral: Int
  limitTime: Int!
  limitMemory: Int!
  submit: Int!
  solved: Int!
  hint: String
  source: String
  sourceId: String
  example: String
}

input ProblemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  problemId: Int
  problemId_not: Int
  problemId_in: [Int!]
  problemId_not_in: [Int!]
  problemId_lt: Int
  problemId_lte: Int
  problemId_gt: Int
  problemId_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  type: Int
  type_not: Int
  type_in: [Int!]
  type_not_in: [Int!]
  type_lt: Int
  type_lte: Int
  type_gt: Int
  type_gte: Int
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  describe: String
  describe_not: String
  describe_in: [String!]
  describe_not_in: [String!]
  describe_lt: String
  describe_lte: String
  describe_gt: String
  describe_gte: String
  describe_contains: String
  describe_not_contains: String
  describe_starts_with: String
  describe_not_starts_with: String
  describe_ends_with: String
  describe_not_ends_with: String
  inDescribe: String
  inDescribe_not: String
  inDescribe_in: [String!]
  inDescribe_not_in: [String!]
  inDescribe_lt: String
  inDescribe_lte: String
  inDescribe_gt: String
  inDescribe_gte: String
  inDescribe_contains: String
  inDescribe_not_contains: String
  inDescribe_starts_with: String
  inDescribe_not_starts_with: String
  inDescribe_ends_with: String
  inDescribe_not_ends_with: String
  outDescribe: String
  outDescribe_not: String
  outDescribe_in: [String!]
  outDescribe_not_in: [String!]
  outDescribe_lt: String
  outDescribe_lte: String
  outDescribe_gt: String
  outDescribe_gte: String
  outDescribe_contains: String
  outDescribe_not_contains: String
  outDescribe_starts_with: String
  outDescribe_not_starts_with: String
  outDescribe_ends_with: String
  outDescribe_not_ends_with: String
  inExample: String
  inExample_not: String
  inExample_in: [String!]
  inExample_not_in: [String!]
  inExample_lt: String
  inExample_lte: String
  inExample_gt: String
  inExample_gte: String
  inExample_contains: String
  inExample_not_contains: String
  inExample_starts_with: String
  inExample_not_starts_with: String
  inExample_ends_with: String
  inExample_not_ends_with: String
  outExample: String
  outExample_not: String
  outExample_in: [String!]
  outExample_not_in: [String!]
  outExample_lt: String
  outExample_lte: String
  outExample_gt: String
  outExample_gte: String
  outExample_contains: String
  outExample_not_contains: String
  outExample_starts_with: String
  outExample_not_starts_with: String
  outExample_ends_with: String
  outExample_not_ends_with: String
  integral: Int
  integral_not: Int
  integral_in: [Int!]
  integral_not_in: [Int!]
  integral_lt: Int
  integral_lte: Int
  integral_gt: Int
  integral_gte: Int
  limitTime: Int
  limitTime_not: Int
  limitTime_in: [Int!]
  limitTime_not_in: [Int!]
  limitTime_lt: Int
  limitTime_lte: Int
  limitTime_gt: Int
  limitTime_gte: Int
  limitMemory: Int
  limitMemory_not: Int
  limitMemory_in: [Int!]
  limitMemory_not_in: [Int!]
  limitMemory_lt: Int
  limitMemory_lte: Int
  limitMemory_gt: Int
  limitMemory_gte: Int
  submit: Int
  submit_not: Int
  submit_in: [Int!]
  submit_not_in: [Int!]
  submit_lt: Int
  submit_lte: Int
  submit_gt: Int
  submit_gte: Int
  solved: Int
  solved_not: Int
  solved_in: [Int!]
  solved_not_in: [Int!]
  solved_lt: Int
  solved_lte: Int
  solved_gt: Int
  solved_gte: Int
  hint: String
  hint_not: String
  hint_in: [String!]
  hint_not_in: [String!]
  hint_lt: String
  hint_lte: String
  hint_gt: String
  hint_gte: String
  hint_contains: String
  hint_not_contains: String
  hint_starts_with: String
  hint_not_starts_with: String
  hint_ends_with: String
  hint_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  sourceId: String
  sourceId_not: String
  sourceId_in: [String!]
  sourceId_not_in: [String!]
  sourceId_lt: String
  sourceId_lte: String
  sourceId_gt: String
  sourceId_gte: String
  sourceId_contains: String
  sourceId_not_contains: String
  sourceId_starts_with: String
  sourceId_not_starts_with: String
  sourceId_ends_with: String
  sourceId_not_ends_with: String
  example: String
  example_not: String
  example_in: [String!]
  example_not_in: [String!]
  example_lt: String
  example_lte: String
  example_gt: String
  example_gte: String
  example_contains: String
  example_not_contains: String
  example_starts_with: String
  example_not_starts_with: String
  example_ends_with: String
  example_not_ends_with: String
  AND: [ProblemScalarWhereInput!]
  OR: [ProblemScalarWhereInput!]
  NOT: [ProblemScalarWhereInput!]
}

type ProblemSubscriptionPayload {
  mutation: MutationType!
  node: Problem
  updatedFields: [String!]
  previousValues: ProblemPreviousValues
}

input ProblemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProblemWhereInput
  AND: [ProblemSubscriptionWhereInput!]
  OR: [ProblemSubscriptionWhereInput!]
  NOT: [ProblemSubscriptionWhereInput!]
}

input ProblemUpdateDataInput {
  problemId: Int
  status: Int
  type: Int
  tags: Json
  title: String
  describe: String
  inDescribe: String
  outDescribe: String
  inExample: String
  outExample: String
  integral: Int
  limitTime: Int
  limitMemory: Int
  submit: Int
  solved: Int
  createUser: UserUpdateOneWithoutCreateProblmesInput
  hint: String
  source: String
  sourceId: String
  example: String
  discuss: DiscussUpdateManyInput
}

input ProblemUpdateInput {
  problemId: Int
  status: Int
  type: Int
  tags: Json
  title: String
  describe: String
  inDescribe: String
  outDescribe: String
  inExample: String
  outExample: String
  integral: Int
  limitTime: Int
  limitMemory: Int
  submit: Int
  solved: Int
  createUser: UserUpdateOneWithoutCreateProblmesInput
  hint: String
  source: String
  sourceId: String
  example: String
  discuss: DiscussUpdateManyInput
}

input ProblemUpdateManyDataInput {
  problemId: Int
  status: Int
  type: Int
  tags: Json
  title: String
  describe: String
  inDescribe: String
  outDescribe: String
  inExample: String
  outExample: String
  integral: Int
  limitTime: Int
  limitMemory: Int
  submit: Int
  solved: Int
  hint: String
  source: String
  sourceId: String
  example: String
}

input ProblemUpdateManyMutationInput {
  problemId: Int
  status: Int
  type: Int
  tags: Json
  title: String
  describe: String
  inDescribe: String
  outDescribe: String
  inExample: String
  outExample: String
  integral: Int
  limitTime: Int
  limitMemory: Int
  submit: Int
  solved: Int
  hint: String
  source: String
  sourceId: String
  example: String
}

input ProblemUpdateManyWithoutCreateUserInput {
  create: [ProblemCreateWithoutCreateUserInput!]
  delete: [ProblemWhereUniqueInput!]
  connect: [ProblemWhereUniqueInput!]
  set: [ProblemWhereUniqueInput!]
  disconnect: [ProblemWhereUniqueInput!]
  update: [ProblemUpdateWithWhereUniqueWithoutCreateUserInput!]
  upsert: [ProblemUpsertWithWhereUniqueWithoutCreateUserInput!]
  deleteMany: [ProblemScalarWhereInput!]
  updateMany: [ProblemUpdateManyWithWhereNestedInput!]
}

input ProblemUpdateManyWithWhereNestedInput {
  where: ProblemScalarWhereInput!
  data: ProblemUpdateManyDataInput!
}

input ProblemUpdateOneInput {
  create: ProblemCreateInput
  update: ProblemUpdateDataInput
  upsert: ProblemUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ProblemWhereUniqueInput
}

input ProblemUpdateOneRequiredInput {
  create: ProblemCreateInput
  update: ProblemUpdateDataInput
  upsert: ProblemUpsertNestedInput
  connect: ProblemWhereUniqueInput
}

input ProblemUpdateWithoutCreateUserDataInput {
  problemId: Int
  status: Int
  type: Int
  tags: Json
  title: String
  describe: String
  inDescribe: String
  outDescribe: String
  inExample: String
  outExample: String
  integral: Int
  limitTime: Int
  limitMemory: Int
  submit: Int
  solved: Int
  hint: String
  source: String
  sourceId: String
  example: String
  discuss: DiscussUpdateManyInput
}

input ProblemUpdateWithWhereUniqueWithoutCreateUserInput {
  where: ProblemWhereUniqueInput!
  data: ProblemUpdateWithoutCreateUserDataInput!
}

input ProblemUpsertNestedInput {
  update: ProblemUpdateDataInput!
  create: ProblemCreateInput!
}

input ProblemUpsertWithWhereUniqueWithoutCreateUserInput {
  where: ProblemWhereUniqueInput!
  update: ProblemUpdateWithoutCreateUserDataInput!
  create: ProblemCreateWithoutCreateUserInput!
}

input ProblemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  problemId: Int
  problemId_not: Int
  problemId_in: [Int!]
  problemId_not_in: [Int!]
  problemId_lt: Int
  problemId_lte: Int
  problemId_gt: Int
  problemId_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  type: Int
  type_not: Int
  type_in: [Int!]
  type_not_in: [Int!]
  type_lt: Int
  type_lte: Int
  type_gt: Int
  type_gte: Int
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  describe: String
  describe_not: String
  describe_in: [String!]
  describe_not_in: [String!]
  describe_lt: String
  describe_lte: String
  describe_gt: String
  describe_gte: String
  describe_contains: String
  describe_not_contains: String
  describe_starts_with: String
  describe_not_starts_with: String
  describe_ends_with: String
  describe_not_ends_with: String
  inDescribe: String
  inDescribe_not: String
  inDescribe_in: [String!]
  inDescribe_not_in: [String!]
  inDescribe_lt: String
  inDescribe_lte: String
  inDescribe_gt: String
  inDescribe_gte: String
  inDescribe_contains: String
  inDescribe_not_contains: String
  inDescribe_starts_with: String
  inDescribe_not_starts_with: String
  inDescribe_ends_with: String
  inDescribe_not_ends_with: String
  outDescribe: String
  outDescribe_not: String
  outDescribe_in: [String!]
  outDescribe_not_in: [String!]
  outDescribe_lt: String
  outDescribe_lte: String
  outDescribe_gt: String
  outDescribe_gte: String
  outDescribe_contains: String
  outDescribe_not_contains: String
  outDescribe_starts_with: String
  outDescribe_not_starts_with: String
  outDescribe_ends_with: String
  outDescribe_not_ends_with: String
  inExample: String
  inExample_not: String
  inExample_in: [String!]
  inExample_not_in: [String!]
  inExample_lt: String
  inExample_lte: String
  inExample_gt: String
  inExample_gte: String
  inExample_contains: String
  inExample_not_contains: String
  inExample_starts_with: String
  inExample_not_starts_with: String
  inExample_ends_with: String
  inExample_not_ends_with: String
  outExample: String
  outExample_not: String
  outExample_in: [String!]
  outExample_not_in: [String!]
  outExample_lt: String
  outExample_lte: String
  outExample_gt: String
  outExample_gte: String
  outExample_contains: String
  outExample_not_contains: String
  outExample_starts_with: String
  outExample_not_starts_with: String
  outExample_ends_with: String
  outExample_not_ends_with: String
  integral: Int
  integral_not: Int
  integral_in: [Int!]
  integral_not_in: [Int!]
  integral_lt: Int
  integral_lte: Int
  integral_gt: Int
  integral_gte: Int
  limitTime: Int
  limitTime_not: Int
  limitTime_in: [Int!]
  limitTime_not_in: [Int!]
  limitTime_lt: Int
  limitTime_lte: Int
  limitTime_gt: Int
  limitTime_gte: Int
  limitMemory: Int
  limitMemory_not: Int
  limitMemory_in: [Int!]
  limitMemory_not_in: [Int!]
  limitMemory_lt: Int
  limitMemory_lte: Int
  limitMemory_gt: Int
  limitMemory_gte: Int
  submit: Int
  submit_not: Int
  submit_in: [Int!]
  submit_not_in: [Int!]
  submit_lt: Int
  submit_lte: Int
  submit_gt: Int
  submit_gte: Int
  solved: Int
  solved_not: Int
  solved_in: [Int!]
  solved_not_in: [Int!]
  solved_lt: Int
  solved_lte: Int
  solved_gt: Int
  solved_gte: Int
  createUser: UserWhereInput
  hint: String
  hint_not: String
  hint_in: [String!]
  hint_not_in: [String!]
  hint_lt: String
  hint_lte: String
  hint_gt: String
  hint_gte: String
  hint_contains: String
  hint_not_contains: String
  hint_starts_with: String
  hint_not_starts_with: String
  hint_ends_with: String
  hint_not_ends_with: String
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  sourceId: String
  sourceId_not: String
  sourceId_in: [String!]
  sourceId_not_in: [String!]
  sourceId_lt: String
  sourceId_lte: String
  sourceId_gt: String
  sourceId_gte: String
  sourceId_contains: String
  sourceId_not_contains: String
  sourceId_starts_with: String
  sourceId_not_starts_with: String
  sourceId_ends_with: String
  sourceId_not_ends_with: String
  example: String
  example_not: String
  example_in: [String!]
  example_not_in: [String!]
  example_lt: String
  example_lte: String
  example_gt: String
  example_gte: String
  example_contains: String
  example_not_contains: String
  example_starts_with: String
  example_not_starts_with: String
  example_ends_with: String
  example_not_ends_with: String
  discuss_every: DiscussWhereInput
  discuss_some: DiscussWhereInput
  discuss_none: DiscussWhereInput
  AND: [ProblemWhereInput!]
  OR: [ProblemWhereInput!]
  NOT: [ProblemWhereInput!]
}

input ProblemWhereUniqueInput {
  id: ID
}

type Query {
  contest(where: ContestWhereUniqueInput!): Contest
  contests(where: ContestWhereInput, orderBy: ContestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contest]!
  contestsConnection(where: ContestWhereInput, orderBy: ContestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContestConnection!
  contestProblem(where: ContestProblemWhereUniqueInput!): ContestProblem
  contestProblems(where: ContestProblemWhereInput, orderBy: ContestProblemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContestProblem]!
  contestProblemsConnection(where: ContestProblemWhereInput, orderBy: ContestProblemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContestProblemConnection!
  discuss(where: DiscussWhereUniqueInput!): Discuss
  discusses(where: DiscussWhereInput, orderBy: DiscussOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Discuss]!
  discussesConnection(where: DiscussWhereInput, orderBy: DiscussOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DiscussConnection!
  discussChilder(where: DiscussChilderWhereUniqueInput!): DiscussChilder
  discussChilders(where: DiscussChilderWhereInput, orderBy: DiscussChilderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DiscussChilder]!
  discussChildersConnection(where: DiscussChilderWhereInput, orderBy: DiscussChilderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DiscussChilderConnection!
  privilegeGroup(where: PrivilegeGroupWhereUniqueInput!): PrivilegeGroup
  privilegeGroups(where: PrivilegeGroupWhereInput, orderBy: PrivilegeGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PrivilegeGroup]!
  privilegeGroupsConnection(where: PrivilegeGroupWhereInput, orderBy: PrivilegeGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PrivilegeGroupConnection!
  problem(where: ProblemWhereUniqueInput!): Problem
  problems(where: ProblemWhereInput, orderBy: ProblemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Problem]!
  problemsConnection(where: ProblemWhereInput, orderBy: ProblemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProblemConnection!
  submit(where: SubmitWhereUniqueInput!): Submit
  submits(where: SubmitWhereInput, orderBy: SubmitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Submit]!
  submitsConnection(where: SubmitWhereInput, orderBy: SubmitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SubmitConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userGroup(where: UserGroupWhereUniqueInput!): UserGroup
  userGroups(where: UserGroupWhereInput, orderBy: UserGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserGroup]!
  userGroupsConnection(where: UserGroupWhereInput, orderBy: UserGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserGroupConnection!
  node(id: ID!): Node
}

type Submit {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User
  userId: String!
  userName: String!
  problem: Problem!
  problemId: String!
  problemTitle: String!
  language: Int!
  code: String!
  result: String!
  errorInfo: String
  contest: Contest
  limitTime: Int!
  limitMemory: Int!
  time: Int!
  memory: Int!
}

type SubmitConnection {
  pageInfo: PageInfo!
  edges: [SubmitEdge]!
  aggregate: AggregateSubmit!
}

input SubmitCreateInput {
  user: UserCreateOneWithoutSubmitRecordInput
  userId: String!
  userName: String!
  problem: ProblemCreateOneInput!
  problemId: String!
  problemTitle: String!
  language: Int!
  code: String!
  result: String!
  errorInfo: String
  contest: ContestCreateOneInput
  limitTime: Int!
  limitMemory: Int!
  time: Int!
  memory: Int!
}

input SubmitCreateManyWithoutUserInput {
  create: [SubmitCreateWithoutUserInput!]
  connect: [SubmitWhereUniqueInput!]
}

input SubmitCreateWithoutUserInput {
  userId: String!
  userName: String!
  problem: ProblemCreateOneInput!
  problemId: String!
  problemTitle: String!
  language: Int!
  code: String!
  result: String!
  errorInfo: String
  contest: ContestCreateOneInput
  limitTime: Int!
  limitMemory: Int!
  time: Int!
  memory: Int!
}

type SubmitEdge {
  node: Submit!
  cursor: String!
}

enum SubmitOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  userId_ASC
  userId_DESC
  userName_ASC
  userName_DESC
  problemId_ASC
  problemId_DESC
  problemTitle_ASC
  problemTitle_DESC
  language_ASC
  language_DESC
  code_ASC
  code_DESC
  result_ASC
  result_DESC
  errorInfo_ASC
  errorInfo_DESC
  limitTime_ASC
  limitTime_DESC
  limitMemory_ASC
  limitMemory_DESC
  time_ASC
  time_DESC
  memory_ASC
  memory_DESC
}

type SubmitPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  userName: String!
  problemId: String!
  problemTitle: String!
  language: Int!
  code: String!
  result: String!
  errorInfo: String
  limitTime: Int!
  limitMemory: Int!
  time: Int!
  memory: Int!
}

input SubmitScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  userId: String
  userId_not: String
  userId_in: [String!]
  userId_not_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_gt: String
  userId_gte: String
  userId_contains: String
  userId_not_contains: String
  userId_starts_with: String
  userId_not_starts_with: String
  userId_ends_with: String
  userId_not_ends_with: String
  userName: String
  userName_not: String
  userName_in: [String!]
  userName_not_in: [String!]
  userName_lt: String
  userName_lte: String
  userName_gt: String
  userName_gte: String
  userName_contains: String
  userName_not_contains: String
  userName_starts_with: String
  userName_not_starts_with: String
  userName_ends_with: String
  userName_not_ends_with: String
  problemId: String
  problemId_not: String
  problemId_in: [String!]
  problemId_not_in: [String!]
  problemId_lt: String
  problemId_lte: String
  problemId_gt: String
  problemId_gte: String
  problemId_contains: String
  problemId_not_contains: String
  problemId_starts_with: String
  problemId_not_starts_with: String
  problemId_ends_with: String
  problemId_not_ends_with: String
  problemTitle: String
  problemTitle_not: String
  problemTitle_in: [String!]
  problemTitle_not_in: [String!]
  problemTitle_lt: String
  problemTitle_lte: String
  problemTitle_gt: String
  problemTitle_gte: String
  problemTitle_contains: String
  problemTitle_not_contains: String
  problemTitle_starts_with: String
  problemTitle_not_starts_with: String
  problemTitle_ends_with: String
  problemTitle_not_ends_with: String
  language: Int
  language_not: Int
  language_in: [Int!]
  language_not_in: [Int!]
  language_lt: Int
  language_lte: Int
  language_gt: Int
  language_gte: Int
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  result: String
  result_not: String
  result_in: [String!]
  result_not_in: [String!]
  result_lt: String
  result_lte: String
  result_gt: String
  result_gte: String
  result_contains: String
  result_not_contains: String
  result_starts_with: String
  result_not_starts_with: String
  result_ends_with: String
  result_not_ends_with: String
  errorInfo: String
  errorInfo_not: String
  errorInfo_in: [String!]
  errorInfo_not_in: [String!]
  errorInfo_lt: String
  errorInfo_lte: String
  errorInfo_gt: String
  errorInfo_gte: String
  errorInfo_contains: String
  errorInfo_not_contains: String
  errorInfo_starts_with: String
  errorInfo_not_starts_with: String
  errorInfo_ends_with: String
  errorInfo_not_ends_with: String
  limitTime: Int
  limitTime_not: Int
  limitTime_in: [Int!]
  limitTime_not_in: [Int!]
  limitTime_lt: Int
  limitTime_lte: Int
  limitTime_gt: Int
  limitTime_gte: Int
  limitMemory: Int
  limitMemory_not: Int
  limitMemory_in: [Int!]
  limitMemory_not_in: [Int!]
  limitMemory_lt: Int
  limitMemory_lte: Int
  limitMemory_gt: Int
  limitMemory_gte: Int
  time: Int
  time_not: Int
  time_in: [Int!]
  time_not_in: [Int!]
  time_lt: Int
  time_lte: Int
  time_gt: Int
  time_gte: Int
  memory: Int
  memory_not: Int
  memory_in: [Int!]
  memory_not_in: [Int!]
  memory_lt: Int
  memory_lte: Int
  memory_gt: Int
  memory_gte: Int
  AND: [SubmitScalarWhereInput!]
  OR: [SubmitScalarWhereInput!]
  NOT: [SubmitScalarWhereInput!]
}

type SubmitSubscriptionPayload {
  mutation: MutationType!
  node: Submit
  updatedFields: [String!]
  previousValues: SubmitPreviousValues
}

input SubmitSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SubmitWhereInput
  AND: [SubmitSubscriptionWhereInput!]
  OR: [SubmitSubscriptionWhereInput!]
  NOT: [SubmitSubscriptionWhereInput!]
}

input SubmitUpdateInput {
  user: UserUpdateOneWithoutSubmitRecordInput
  userId: String
  userName: String
  problem: ProblemUpdateOneRequiredInput
  problemId: String
  problemTitle: String
  language: Int
  code: String
  result: String
  errorInfo: String
  contest: ContestUpdateOneInput
  limitTime: Int
  limitMemory: Int
  time: Int
  memory: Int
}

input SubmitUpdateManyDataInput {
  userId: String
  userName: String
  problemId: String
  problemTitle: String
  language: Int
  code: String
  result: String
  errorInfo: String
  limitTime: Int
  limitMemory: Int
  time: Int
  memory: Int
}

input SubmitUpdateManyMutationInput {
  userId: String
  userName: String
  problemId: String
  problemTitle: String
  language: Int
  code: String
  result: String
  errorInfo: String
  limitTime: Int
  limitMemory: Int
  time: Int
  memory: Int
}

input SubmitUpdateManyWithoutUserInput {
  create: [SubmitCreateWithoutUserInput!]
  delete: [SubmitWhereUniqueInput!]
  connect: [SubmitWhereUniqueInput!]
  set: [SubmitWhereUniqueInput!]
  disconnect: [SubmitWhereUniqueInput!]
  update: [SubmitUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [SubmitUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [SubmitScalarWhereInput!]
  updateMany: [SubmitUpdateManyWithWhereNestedInput!]
}

input SubmitUpdateManyWithWhereNestedInput {
  where: SubmitScalarWhereInput!
  data: SubmitUpdateManyDataInput!
}

input SubmitUpdateWithoutUserDataInput {
  userId: String
  userName: String
  problem: ProblemUpdateOneRequiredInput
  problemId: String
  problemTitle: String
  language: Int
  code: String
  result: String
  errorInfo: String
  contest: ContestUpdateOneInput
  limitTime: Int
  limitMemory: Int
  time: Int
  memory: Int
}

input SubmitUpdateWithWhereUniqueWithoutUserInput {
  where: SubmitWhereUniqueInput!
  data: SubmitUpdateWithoutUserDataInput!
}

input SubmitUpsertWithWhereUniqueWithoutUserInput {
  where: SubmitWhereUniqueInput!
  update: SubmitUpdateWithoutUserDataInput!
  create: SubmitCreateWithoutUserInput!
}

input SubmitWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  user: UserWhereInput
  userId: String
  userId_not: String
  userId_in: [String!]
  userId_not_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_gt: String
  userId_gte: String
  userId_contains: String
  userId_not_contains: String
  userId_starts_with: String
  userId_not_starts_with: String
  userId_ends_with: String
  userId_not_ends_with: String
  userName: String
  userName_not: String
  userName_in: [String!]
  userName_not_in: [String!]
  userName_lt: String
  userName_lte: String
  userName_gt: String
  userName_gte: String
  userName_contains: String
  userName_not_contains: String
  userName_starts_with: String
  userName_not_starts_with: String
  userName_ends_with: String
  userName_not_ends_with: String
  problem: ProblemWhereInput
  problemId: String
  problemId_not: String
  problemId_in: [String!]
  problemId_not_in: [String!]
  problemId_lt: String
  problemId_lte: String
  problemId_gt: String
  problemId_gte: String
  problemId_contains: String
  problemId_not_contains: String
  problemId_starts_with: String
  problemId_not_starts_with: String
  problemId_ends_with: String
  problemId_not_ends_with: String
  problemTitle: String
  problemTitle_not: String
  problemTitle_in: [String!]
  problemTitle_not_in: [String!]
  problemTitle_lt: String
  problemTitle_lte: String
  problemTitle_gt: String
  problemTitle_gte: String
  problemTitle_contains: String
  problemTitle_not_contains: String
  problemTitle_starts_with: String
  problemTitle_not_starts_with: String
  problemTitle_ends_with: String
  problemTitle_not_ends_with: String
  language: Int
  language_not: Int
  language_in: [Int!]
  language_not_in: [Int!]
  language_lt: Int
  language_lte: Int
  language_gt: Int
  language_gte: Int
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  result: String
  result_not: String
  result_in: [String!]
  result_not_in: [String!]
  result_lt: String
  result_lte: String
  result_gt: String
  result_gte: String
  result_contains: String
  result_not_contains: String
  result_starts_with: String
  result_not_starts_with: String
  result_ends_with: String
  result_not_ends_with: String
  errorInfo: String
  errorInfo_not: String
  errorInfo_in: [String!]
  errorInfo_not_in: [String!]
  errorInfo_lt: String
  errorInfo_lte: String
  errorInfo_gt: String
  errorInfo_gte: String
  errorInfo_contains: String
  errorInfo_not_contains: String
  errorInfo_starts_with: String
  errorInfo_not_starts_with: String
  errorInfo_ends_with: String
  errorInfo_not_ends_with: String
  contest: ContestWhereInput
  limitTime: Int
  limitTime_not: Int
  limitTime_in: [Int!]
  limitTime_not_in: [Int!]
  limitTime_lt: Int
  limitTime_lte: Int
  limitTime_gt: Int
  limitTime_gte: Int
  limitMemory: Int
  limitMemory_not: Int
  limitMemory_in: [Int!]
  limitMemory_not_in: [Int!]
  limitMemory_lt: Int
  limitMemory_lte: Int
  limitMemory_gt: Int
  limitMemory_gte: Int
  time: Int
  time_not: Int
  time_in: [Int!]
  time_not_in: [Int!]
  time_lt: Int
  time_lte: Int
  time_gt: Int
  time_gte: Int
  memory: Int
  memory_not: Int
  memory_in: [Int!]
  memory_not_in: [Int!]
  memory_lt: Int
  memory_lte: Int
  memory_gt: Int
  memory_gte: Int
  AND: [SubmitWhereInput!]
  OR: [SubmitWhereInput!]
  NOT: [SubmitWhereInput!]
}

input SubmitWhereUniqueInput {
  id: ID
}

type Subscription {
  contest(where: ContestSubscriptionWhereInput): ContestSubscriptionPayload
  contestProblem(where: ContestProblemSubscriptionWhereInput): ContestProblemSubscriptionPayload
  discuss(where: DiscussSubscriptionWhereInput): DiscussSubscriptionPayload
  discussChilder(where: DiscussChilderSubscriptionWhereInput): DiscussChilderSubscriptionPayload
  privilegeGroup(where: PrivilegeGroupSubscriptionWhereInput): PrivilegeGroupSubscriptionPayload
  problem(where: ProblemSubscriptionWhereInput): ProblemSubscriptionPayload
  submit(where: SubmitSubscriptionWhereInput): SubmitSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userGroup(where: UserGroupSubscriptionWhereInput): UserGroupSubscriptionPayload
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  password: String!
  status: Int!
  level: Int!
  name: String!
  photo: String
  email: String
  desc: String
  integral: Int!
  coin: Int!
  defaultUserGroup: String
  defaultUserGroupId: String
  privilegeBlack: Int!
  privilegeWhite: Int!
  privilegeCache: Int!
  privilegeGroup(where: PrivilegeGroupWhereInput, orderBy: PrivilegeGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PrivilegeGroup!]
  UserDiscuss(where: DiscussWhereInput, orderBy: DiscussOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Discuss!]
  UserDiscussChilder(where: DiscussChilderWhereInput, orderBy: DiscussChilderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DiscussChilder!]
  userGroup(where: UserGroupWhereInput, orderBy: UserGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserGroup!]
  createUserGroup(where: UserGroupWhereInput, orderBy: UserGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserGroup!]
  privilegeUserGroup(where: UserGroupWhereInput, orderBy: UserGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserGroup!]
  applyUserGroup(where: UserGroupWhereInput, orderBy: UserGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserGroup!]
  problems: [Json!]!
  createProblmes(where: ProblemWhereInput, orderBy: ProblemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Problem!]
  submitRecord(where: SubmitWhereInput, orderBy: SubmitOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Submit!]
  submit: Int!
  solved: Int!
  accepted: Int!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  userId: String!
  password: String!
  status: Int
  level: Int
  name: String!
  photo: String
  email: String
  desc: String
  integral: Int
  coin: Int
  defaultUserGroup: String
  defaultUserGroupId: String
  privilegeBlack: Int
  privilegeWhite: Int
  privilegeCache: Int
  privilegeGroup: PrivilegeGroupCreateManyWithoutUsersInput
  UserDiscuss: DiscussCreateManyWithoutUserInput
  UserDiscussChilder: DiscussChilderCreateManyWithoutUserInput
  userGroup: UserGroupCreateManyWithoutUsersInput
  createUserGroup: UserGroupCreateManyWithoutCreateUserInput
  privilegeUserGroup: UserGroupCreateManyInput
  applyUserGroup: UserGroupCreateManyWithoutApplyUsersInput
  problems: UserCreateproblemsInput
  createProblmes: ProblemCreateManyWithoutCreateUserInput
  submitRecord: SubmitCreateManyWithoutUserInput
  submit: Int
  solved: Int
  accepted: Int
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutApplyUserGroupInput {
  create: [UserCreateWithoutApplyUserGroupInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutPrivilegeGroupInput {
  create: [UserCreateWithoutPrivilegeGroupInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutUserGroupInput {
  create: [UserCreateWithoutUserGroupInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutCreateProblmesInput {
  create: UserCreateWithoutCreateProblmesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCreateUserGroupInput {
  create: UserCreateWithoutCreateUserGroupInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSubmitRecordInput {
  create: UserCreateWithoutSubmitRecordInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutUserDiscussChilderInput {
  create: UserCreateWithoutUserDiscussChilderInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutUserDiscussInput {
  create: UserCreateWithoutUserDiscussInput
  connect: UserWhereUniqueInput
}

input UserCreateproblemsInput {
  set: [Json!]
}

input UserCreateWithoutApplyUserGroupInput {
  userId: String!
  password: String!
  status: Int
  level: Int
  name: String!
  photo: String
  email: String
  desc: String
  integral: Int
  coin: Int
  defaultUserGroup: String
  defaultUserGroupId: String
  privilegeBlack: Int
  privilegeWhite: Int
  privilegeCache: Int
  privilegeGroup: PrivilegeGroupCreateManyWithoutUsersInput
  UserDiscuss: DiscussCreateManyWithoutUserInput
  UserDiscussChilder: DiscussChilderCreateManyWithoutUserInput
  userGroup: UserGroupCreateManyWithoutUsersInput
  createUserGroup: UserGroupCreateManyWithoutCreateUserInput
  privilegeUserGroup: UserGroupCreateManyInput
  problems: UserCreateproblemsInput
  createProblmes: ProblemCreateManyWithoutCreateUserInput
  submitRecord: SubmitCreateManyWithoutUserInput
  submit: Int
  solved: Int
  accepted: Int
}

input UserCreateWithoutCreateProblmesInput {
  userId: String!
  password: String!
  status: Int
  level: Int
  name: String!
  photo: String
  email: String
  desc: String
  integral: Int
  coin: Int
  defaultUserGroup: String
  defaultUserGroupId: String
  privilegeBlack: Int
  privilegeWhite: Int
  privilegeCache: Int
  privilegeGroup: PrivilegeGroupCreateManyWithoutUsersInput
  UserDiscuss: DiscussCreateManyWithoutUserInput
  UserDiscussChilder: DiscussChilderCreateManyWithoutUserInput
  userGroup: UserGroupCreateManyWithoutUsersInput
  createUserGroup: UserGroupCreateManyWithoutCreateUserInput
  privilegeUserGroup: UserGroupCreateManyInput
  applyUserGroup: UserGroupCreateManyWithoutApplyUsersInput
  problems: UserCreateproblemsInput
  submitRecord: SubmitCreateManyWithoutUserInput
  submit: Int
  solved: Int
  accepted: Int
}

input UserCreateWithoutCreateUserGroupInput {
  userId: String!
  password: String!
  status: Int
  level: Int
  name: String!
  photo: String
  email: String
  desc: String
  integral: Int
  coin: Int
  defaultUserGroup: String
  defaultUserGroupId: String
  privilegeBlack: Int
  privilegeWhite: Int
  privilegeCache: Int
  privilegeGroup: PrivilegeGroupCreateManyWithoutUsersInput
  UserDiscuss: DiscussCreateManyWithoutUserInput
  UserDiscussChilder: DiscussChilderCreateManyWithoutUserInput
  userGroup: UserGroupCreateManyWithoutUsersInput
  privilegeUserGroup: UserGroupCreateManyInput
  applyUserGroup: UserGroupCreateManyWithoutApplyUsersInput
  problems: UserCreateproblemsInput
  createProblmes: ProblemCreateManyWithoutCreateUserInput
  submitRecord: SubmitCreateManyWithoutUserInput
  submit: Int
  solved: Int
  accepted: Int
}

input UserCreateWithoutPrivilegeGroupInput {
  userId: String!
  password: String!
  status: Int
  level: Int
  name: String!
  photo: String
  email: String
  desc: String
  integral: Int
  coin: Int
  defaultUserGroup: String
  defaultUserGroupId: String
  privilegeBlack: Int
  privilegeWhite: Int
  privilegeCache: Int
  UserDiscuss: DiscussCreateManyWithoutUserInput
  UserDiscussChilder: DiscussChilderCreateManyWithoutUserInput
  userGroup: UserGroupCreateManyWithoutUsersInput
  createUserGroup: UserGroupCreateManyWithoutCreateUserInput
  privilegeUserGroup: UserGroupCreateManyInput
  applyUserGroup: UserGroupCreateManyWithoutApplyUsersInput
  problems: UserCreateproblemsInput
  createProblmes: ProblemCreateManyWithoutCreateUserInput
  submitRecord: SubmitCreateManyWithoutUserInput
  submit: Int
  solved: Int
  accepted: Int
}

input UserCreateWithoutSubmitRecordInput {
  userId: String!
  password: String!
  status: Int
  level: Int
  name: String!
  photo: String
  email: String
  desc: String
  integral: Int
  coin: Int
  defaultUserGroup: String
  defaultUserGroupId: String
  privilegeBlack: Int
  privilegeWhite: Int
  privilegeCache: Int
  privilegeGroup: PrivilegeGroupCreateManyWithoutUsersInput
  UserDiscuss: DiscussCreateManyWithoutUserInput
  UserDiscussChilder: DiscussChilderCreateManyWithoutUserInput
  userGroup: UserGroupCreateManyWithoutUsersInput
  createUserGroup: UserGroupCreateManyWithoutCreateUserInput
  privilegeUserGroup: UserGroupCreateManyInput
  applyUserGroup: UserGroupCreateManyWithoutApplyUsersInput
  problems: UserCreateproblemsInput
  createProblmes: ProblemCreateManyWithoutCreateUserInput
  submit: Int
  solved: Int
  accepted: Int
}

input UserCreateWithoutUserDiscussChilderInput {
  userId: String!
  password: String!
  status: Int
  level: Int
  name: String!
  photo: String
  email: String
  desc: String
  integral: Int
  coin: Int
  defaultUserGroup: String
  defaultUserGroupId: String
  privilegeBlack: Int
  privilegeWhite: Int
  privilegeCache: Int
  privilegeGroup: PrivilegeGroupCreateManyWithoutUsersInput
  UserDiscuss: DiscussCreateManyWithoutUserInput
  userGroup: UserGroupCreateManyWithoutUsersInput
  createUserGroup: UserGroupCreateManyWithoutCreateUserInput
  privilegeUserGroup: UserGroupCreateManyInput
  applyUserGroup: UserGroupCreateManyWithoutApplyUsersInput
  problems: UserCreateproblemsInput
  createProblmes: ProblemCreateManyWithoutCreateUserInput
  submitRecord: SubmitCreateManyWithoutUserInput
  submit: Int
  solved: Int
  accepted: Int
}

input UserCreateWithoutUserDiscussInput {
  userId: String!
  password: String!
  status: Int
  level: Int
  name: String!
  photo: String
  email: String
  desc: String
  integral: Int
  coin: Int
  defaultUserGroup: String
  defaultUserGroupId: String
  privilegeBlack: Int
  privilegeWhite: Int
  privilegeCache: Int
  privilegeGroup: PrivilegeGroupCreateManyWithoutUsersInput
  UserDiscussChilder: DiscussChilderCreateManyWithoutUserInput
  userGroup: UserGroupCreateManyWithoutUsersInput
  createUserGroup: UserGroupCreateManyWithoutCreateUserInput
  privilegeUserGroup: UserGroupCreateManyInput
  applyUserGroup: UserGroupCreateManyWithoutApplyUsersInput
  problems: UserCreateproblemsInput
  createProblmes: ProblemCreateManyWithoutCreateUserInput
  submitRecord: SubmitCreateManyWithoutUserInput
  submit: Int
  solved: Int
  accepted: Int
}

input UserCreateWithoutUserGroupInput {
  userId: String!
  password: String!
  status: Int
  level: Int
  name: String!
  photo: String
  email: String
  desc: String
  integral: Int
  coin: Int
  defaultUserGroup: String
  defaultUserGroupId: String
  privilegeBlack: Int
  privilegeWhite: Int
  privilegeCache: Int
  privilegeGroup: PrivilegeGroupCreateManyWithoutUsersInput
  UserDiscuss: DiscussCreateManyWithoutUserInput
  UserDiscussChilder: DiscussChilderCreateManyWithoutUserInput
  createUserGroup: UserGroupCreateManyWithoutCreateUserInput
  privilegeUserGroup: UserGroupCreateManyInput
  applyUserGroup: UserGroupCreateManyWithoutApplyUsersInput
  problems: UserCreateproblemsInput
  createProblmes: ProblemCreateManyWithoutCreateUserInput
  submitRecord: SubmitCreateManyWithoutUserInput
  submit: Int
  solved: Int
  accepted: Int
}

type UserEdge {
  node: User!
  cursor: String!
}

type UserGroup {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  desc: String
  count: Int!
  createUserId: String!
  createUserName: String!
  createUser: User!
  privilege(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  applyUsers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type UserGroupConnection {
  pageInfo: PageInfo!
  edges: [UserGroupEdge]!
  aggregate: AggregateUserGroup!
}

input UserGroupCreateInput {
  name: String!
  desc: String
  count: Int
  createUserId: String!
  createUserName: String!
  createUser: UserCreateOneWithoutCreateUserGroupInput!
  privilege: UserCreateManyInput
  users: UserCreateManyWithoutUserGroupInput
  applyUsers: UserCreateManyWithoutApplyUserGroupInput
}

input UserGroupCreateManyInput {
  create: [UserGroupCreateInput!]
  connect: [UserGroupWhereUniqueInput!]
}

input UserGroupCreateManyWithoutApplyUsersInput {
  create: [UserGroupCreateWithoutApplyUsersInput!]
  connect: [UserGroupWhereUniqueInput!]
}

input UserGroupCreateManyWithoutCreateUserInput {
  create: [UserGroupCreateWithoutCreateUserInput!]
  connect: [UserGroupWhereUniqueInput!]
}

input UserGroupCreateManyWithoutUsersInput {
  create: [UserGroupCreateWithoutUsersInput!]
  connect: [UserGroupWhereUniqueInput!]
}

input UserGroupCreateWithoutApplyUsersInput {
  name: String!
  desc: String
  count: Int
  createUserId: String!
  createUserName: String!
  createUser: UserCreateOneWithoutCreateUserGroupInput!
  privilege: UserCreateManyInput
  users: UserCreateManyWithoutUserGroupInput
}

input UserGroupCreateWithoutCreateUserInput {
  name: String!
  desc: String
  count: Int
  createUserId: String!
  createUserName: String!
  privilege: UserCreateManyInput
  users: UserCreateManyWithoutUserGroupInput
  applyUsers: UserCreateManyWithoutApplyUserGroupInput
}

input UserGroupCreateWithoutUsersInput {
  name: String!
  desc: String
  count: Int
  createUserId: String!
  createUserName: String!
  createUser: UserCreateOneWithoutCreateUserGroupInput!
  privilege: UserCreateManyInput
  applyUsers: UserCreateManyWithoutApplyUserGroupInput
}

type UserGroupEdge {
  node: UserGroup!
  cursor: String!
}

enum UserGroupOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  desc_ASC
  desc_DESC
  count_ASC
  count_DESC
  createUserId_ASC
  createUserId_DESC
  createUserName_ASC
  createUserName_DESC
}

type UserGroupPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  desc: String
  count: Int!
  createUserId: String!
  createUserName: String!
}

input UserGroupScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  count: Int
  count_not: Int
  count_in: [Int!]
  count_not_in: [Int!]
  count_lt: Int
  count_lte: Int
  count_gt: Int
  count_gte: Int
  createUserId: String
  createUserId_not: String
  createUserId_in: [String!]
  createUserId_not_in: [String!]
  createUserId_lt: String
  createUserId_lte: String
  createUserId_gt: String
  createUserId_gte: String
  createUserId_contains: String
  createUserId_not_contains: String
  createUserId_starts_with: String
  createUserId_not_starts_with: String
  createUserId_ends_with: String
  createUserId_not_ends_with: String
  createUserName: String
  createUserName_not: String
  createUserName_in: [String!]
  createUserName_not_in: [String!]
  createUserName_lt: String
  createUserName_lte: String
  createUserName_gt: String
  createUserName_gte: String
  createUserName_contains: String
  createUserName_not_contains: String
  createUserName_starts_with: String
  createUserName_not_starts_with: String
  createUserName_ends_with: String
  createUserName_not_ends_with: String
  AND: [UserGroupScalarWhereInput!]
  OR: [UserGroupScalarWhereInput!]
  NOT: [UserGroupScalarWhereInput!]
}

type UserGroupSubscriptionPayload {
  mutation: MutationType!
  node: UserGroup
  updatedFields: [String!]
  previousValues: UserGroupPreviousValues
}

input UserGroupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserGroupWhereInput
  AND: [UserGroupSubscriptionWhereInput!]
  OR: [UserGroupSubscriptionWhereInput!]
  NOT: [UserGroupSubscriptionWhereInput!]
}

input UserGroupUpdateDataInput {
  name: String
  desc: String
  count: Int
  createUserId: String
  createUserName: String
  createUser: UserUpdateOneRequiredWithoutCreateUserGroupInput
  privilege: UserUpdateManyInput
  users: UserUpdateManyWithoutUserGroupInput
  applyUsers: UserUpdateManyWithoutApplyUserGroupInput
}

input UserGroupUpdateInput {
  name: String
  desc: String
  count: Int
  createUserId: String
  createUserName: String
  createUser: UserUpdateOneRequiredWithoutCreateUserGroupInput
  privilege: UserUpdateManyInput
  users: UserUpdateManyWithoutUserGroupInput
  applyUsers: UserUpdateManyWithoutApplyUserGroupInput
}

input UserGroupUpdateManyDataInput {
  name: String
  desc: String
  count: Int
  createUserId: String
  createUserName: String
}

input UserGroupUpdateManyInput {
  create: [UserGroupCreateInput!]
  update: [UserGroupUpdateWithWhereUniqueNestedInput!]
  upsert: [UserGroupUpsertWithWhereUniqueNestedInput!]
  delete: [UserGroupWhereUniqueInput!]
  connect: [UserGroupWhereUniqueInput!]
  set: [UserGroupWhereUniqueInput!]
  disconnect: [UserGroupWhereUniqueInput!]
  deleteMany: [UserGroupScalarWhereInput!]
  updateMany: [UserGroupUpdateManyWithWhereNestedInput!]
}

input UserGroupUpdateManyMutationInput {
  name: String
  desc: String
  count: Int
  createUserId: String
  createUserName: String
}

input UserGroupUpdateManyWithoutApplyUsersInput {
  create: [UserGroupCreateWithoutApplyUsersInput!]
  delete: [UserGroupWhereUniqueInput!]
  connect: [UserGroupWhereUniqueInput!]
  set: [UserGroupWhereUniqueInput!]
  disconnect: [UserGroupWhereUniqueInput!]
  update: [UserGroupUpdateWithWhereUniqueWithoutApplyUsersInput!]
  upsert: [UserGroupUpsertWithWhereUniqueWithoutApplyUsersInput!]
  deleteMany: [UserGroupScalarWhereInput!]
  updateMany: [UserGroupUpdateManyWithWhereNestedInput!]
}

input UserGroupUpdateManyWithoutCreateUserInput {
  create: [UserGroupCreateWithoutCreateUserInput!]
  delete: [UserGroupWhereUniqueInput!]
  connect: [UserGroupWhereUniqueInput!]
  set: [UserGroupWhereUniqueInput!]
  disconnect: [UserGroupWhereUniqueInput!]
  update: [UserGroupUpdateWithWhereUniqueWithoutCreateUserInput!]
  upsert: [UserGroupUpsertWithWhereUniqueWithoutCreateUserInput!]
  deleteMany: [UserGroupScalarWhereInput!]
  updateMany: [UserGroupUpdateManyWithWhereNestedInput!]
}

input UserGroupUpdateManyWithoutUsersInput {
  create: [UserGroupCreateWithoutUsersInput!]
  delete: [UserGroupWhereUniqueInput!]
  connect: [UserGroupWhereUniqueInput!]
  set: [UserGroupWhereUniqueInput!]
  disconnect: [UserGroupWhereUniqueInput!]
  update: [UserGroupUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [UserGroupUpsertWithWhereUniqueWithoutUsersInput!]
  deleteMany: [UserGroupScalarWhereInput!]
  updateMany: [UserGroupUpdateManyWithWhereNestedInput!]
}

input UserGroupUpdateManyWithWhereNestedInput {
  where: UserGroupScalarWhereInput!
  data: UserGroupUpdateManyDataInput!
}

input UserGroupUpdateWithoutApplyUsersDataInput {
  name: String
  desc: String
  count: Int
  createUserId: String
  createUserName: String
  createUser: UserUpdateOneRequiredWithoutCreateUserGroupInput
  privilege: UserUpdateManyInput
  users: UserUpdateManyWithoutUserGroupInput
}

input UserGroupUpdateWithoutCreateUserDataInput {
  name: String
  desc: String
  count: Int
  createUserId: String
  createUserName: String
  privilege: UserUpdateManyInput
  users: UserUpdateManyWithoutUserGroupInput
  applyUsers: UserUpdateManyWithoutApplyUserGroupInput
}

input UserGroupUpdateWithoutUsersDataInput {
  name: String
  desc: String
  count: Int
  createUserId: String
  createUserName: String
  createUser: UserUpdateOneRequiredWithoutCreateUserGroupInput
  privilege: UserUpdateManyInput
  applyUsers: UserUpdateManyWithoutApplyUserGroupInput
}

input UserGroupUpdateWithWhereUniqueNestedInput {
  where: UserGroupWhereUniqueInput!
  data: UserGroupUpdateDataInput!
}

input UserGroupUpdateWithWhereUniqueWithoutApplyUsersInput {
  where: UserGroupWhereUniqueInput!
  data: UserGroupUpdateWithoutApplyUsersDataInput!
}

input UserGroupUpdateWithWhereUniqueWithoutCreateUserInput {
  where: UserGroupWhereUniqueInput!
  data: UserGroupUpdateWithoutCreateUserDataInput!
}

input UserGroupUpdateWithWhereUniqueWithoutUsersInput {
  where: UserGroupWhereUniqueInput!
  data: UserGroupUpdateWithoutUsersDataInput!
}

input UserGroupUpsertWithWhereUniqueNestedInput {
  where: UserGroupWhereUniqueInput!
  update: UserGroupUpdateDataInput!
  create: UserGroupCreateInput!
}

input UserGroupUpsertWithWhereUniqueWithoutApplyUsersInput {
  where: UserGroupWhereUniqueInput!
  update: UserGroupUpdateWithoutApplyUsersDataInput!
  create: UserGroupCreateWithoutApplyUsersInput!
}

input UserGroupUpsertWithWhereUniqueWithoutCreateUserInput {
  where: UserGroupWhereUniqueInput!
  update: UserGroupUpdateWithoutCreateUserDataInput!
  create: UserGroupCreateWithoutCreateUserInput!
}

input UserGroupUpsertWithWhereUniqueWithoutUsersInput {
  where: UserGroupWhereUniqueInput!
  update: UserGroupUpdateWithoutUsersDataInput!
  create: UserGroupCreateWithoutUsersInput!
}

input UserGroupWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  count: Int
  count_not: Int
  count_in: [Int!]
  count_not_in: [Int!]
  count_lt: Int
  count_lte: Int
  count_gt: Int
  count_gte: Int
  createUserId: String
  createUserId_not: String
  createUserId_in: [String!]
  createUserId_not_in: [String!]
  createUserId_lt: String
  createUserId_lte: String
  createUserId_gt: String
  createUserId_gte: String
  createUserId_contains: String
  createUserId_not_contains: String
  createUserId_starts_with: String
  createUserId_not_starts_with: String
  createUserId_ends_with: String
  createUserId_not_ends_with: String
  createUserName: String
  createUserName_not: String
  createUserName_in: [String!]
  createUserName_not_in: [String!]
  createUserName_lt: String
  createUserName_lte: String
  createUserName_gt: String
  createUserName_gte: String
  createUserName_contains: String
  createUserName_not_contains: String
  createUserName_starts_with: String
  createUserName_not_starts_with: String
  createUserName_ends_with: String
  createUserName_not_ends_with: String
  createUser: UserWhereInput
  privilege_every: UserWhereInput
  privilege_some: UserWhereInput
  privilege_none: UserWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  applyUsers_every: UserWhereInput
  applyUsers_some: UserWhereInput
  applyUsers_none: UserWhereInput
  AND: [UserGroupWhereInput!]
  OR: [UserGroupWhereInput!]
  NOT: [UserGroupWhereInput!]
}

input UserGroupWhereUniqueInput {
  id: ID
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  userId_ASC
  userId_DESC
  password_ASC
  password_DESC
  status_ASC
  status_DESC
  level_ASC
  level_DESC
  name_ASC
  name_DESC
  photo_ASC
  photo_DESC
  email_ASC
  email_DESC
  desc_ASC
  desc_DESC
  integral_ASC
  integral_DESC
  coin_ASC
  coin_DESC
  defaultUserGroup_ASC
  defaultUserGroup_DESC
  defaultUserGroupId_ASC
  defaultUserGroupId_DESC
  privilegeBlack_ASC
  privilegeBlack_DESC
  privilegeWhite_ASC
  privilegeWhite_DESC
  privilegeCache_ASC
  privilegeCache_DESC
  submit_ASC
  submit_DESC
  solved_ASC
  solved_DESC
  accepted_ASC
  accepted_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  password: String!
  status: Int!
  level: Int!
  name: String!
  photo: String
  email: String
  desc: String
  integral: Int!
  coin: Int!
  defaultUserGroup: String
  defaultUserGroupId: String
  privilegeBlack: Int!
  privilegeWhite: Int!
  privilegeCache: Int!
  problems: [Json!]!
  submit: Int!
  solved: Int!
  accepted: Int!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  userId: String
  userId_not: String
  userId_in: [String!]
  userId_not_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_gt: String
  userId_gte: String
  userId_contains: String
  userId_not_contains: String
  userId_starts_with: String
  userId_not_starts_with: String
  userId_ends_with: String
  userId_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  level: Int
  level_not: Int
  level_in: [Int!]
  level_not_in: [Int!]
  level_lt: Int
  level_lte: Int
  level_gt: Int
  level_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  photo: String
  photo_not: String
  photo_in: [String!]
  photo_not_in: [String!]
  photo_lt: String
  photo_lte: String
  photo_gt: String
  photo_gte: String
  photo_contains: String
  photo_not_contains: String
  photo_starts_with: String
  photo_not_starts_with: String
  photo_ends_with: String
  photo_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  integral: Int
  integral_not: Int
  integral_in: [Int!]
  integral_not_in: [Int!]
  integral_lt: Int
  integral_lte: Int
  integral_gt: Int
  integral_gte: Int
  coin: Int
  coin_not: Int
  coin_in: [Int!]
  coin_not_in: [Int!]
  coin_lt: Int
  coin_lte: Int
  coin_gt: Int
  coin_gte: Int
  defaultUserGroup: String
  defaultUserGroup_not: String
  defaultUserGroup_in: [String!]
  defaultUserGroup_not_in: [String!]
  defaultUserGroup_lt: String
  defaultUserGroup_lte: String
  defaultUserGroup_gt: String
  defaultUserGroup_gte: String
  defaultUserGroup_contains: String
  defaultUserGroup_not_contains: String
  defaultUserGroup_starts_with: String
  defaultUserGroup_not_starts_with: String
  defaultUserGroup_ends_with: String
  defaultUserGroup_not_ends_with: String
  defaultUserGroupId: String
  defaultUserGroupId_not: String
  defaultUserGroupId_in: [String!]
  defaultUserGroupId_not_in: [String!]
  defaultUserGroupId_lt: String
  defaultUserGroupId_lte: String
  defaultUserGroupId_gt: String
  defaultUserGroupId_gte: String
  defaultUserGroupId_contains: String
  defaultUserGroupId_not_contains: String
  defaultUserGroupId_starts_with: String
  defaultUserGroupId_not_starts_with: String
  defaultUserGroupId_ends_with: String
  defaultUserGroupId_not_ends_with: String
  privilegeBlack: Int
  privilegeBlack_not: Int
  privilegeBlack_in: [Int!]
  privilegeBlack_not_in: [Int!]
  privilegeBlack_lt: Int
  privilegeBlack_lte: Int
  privilegeBlack_gt: Int
  privilegeBlack_gte: Int
  privilegeWhite: Int
  privilegeWhite_not: Int
  privilegeWhite_in: [Int!]
  privilegeWhite_not_in: [Int!]
  privilegeWhite_lt: Int
  privilegeWhite_lte: Int
  privilegeWhite_gt: Int
  privilegeWhite_gte: Int
  privilegeCache: Int
  privilegeCache_not: Int
  privilegeCache_in: [Int!]
  privilegeCache_not_in: [Int!]
  privilegeCache_lt: Int
  privilegeCache_lte: Int
  privilegeCache_gt: Int
  privilegeCache_gte: Int
  submit: Int
  submit_not: Int
  submit_in: [Int!]
  submit_not_in: [Int!]
  submit_lt: Int
  submit_lte: Int
  submit_gt: Int
  submit_gte: Int
  solved: Int
  solved_not: Int
  solved_in: [Int!]
  solved_not_in: [Int!]
  solved_lt: Int
  solved_lte: Int
  solved_gt: Int
  solved_gte: Int
  accepted: Int
  accepted_not: Int
  accepted_in: [Int!]
  accepted_not_in: [Int!]
  accepted_lt: Int
  accepted_lte: Int
  accepted_gt: Int
  accepted_gte: Int
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  userId: String
  password: String
  status: Int
  level: Int
  name: String
  photo: String
  email: String
  desc: String
  integral: Int
  coin: Int
  defaultUserGroup: String
  defaultUserGroupId: String
  privilegeBlack: Int
  privilegeWhite: Int
  privilegeCache: Int
  privilegeGroup: PrivilegeGroupUpdateManyWithoutUsersInput
  UserDiscuss: DiscussUpdateManyWithoutUserInput
  UserDiscussChilder: DiscussChilderUpdateManyWithoutUserInput
  userGroup: UserGroupUpdateManyWithoutUsersInput
  createUserGroup: UserGroupUpdateManyWithoutCreateUserInput
  privilegeUserGroup: UserGroupUpdateManyInput
  applyUserGroup: UserGroupUpdateManyWithoutApplyUsersInput
  problems: UserUpdateproblemsInput
  createProblmes: ProblemUpdateManyWithoutCreateUserInput
  submitRecord: SubmitUpdateManyWithoutUserInput
  submit: Int
  solved: Int
  accepted: Int
}

input UserUpdateInput {
  userId: String
  password: String
  status: Int
  level: Int
  name: String
  photo: String
  email: String
  desc: String
  integral: Int
  coin: Int
  defaultUserGroup: String
  defaultUserGroupId: String
  privilegeBlack: Int
  privilegeWhite: Int
  privilegeCache: Int
  privilegeGroup: PrivilegeGroupUpdateManyWithoutUsersInput
  UserDiscuss: DiscussUpdateManyWithoutUserInput
  UserDiscussChilder: DiscussChilderUpdateManyWithoutUserInput
  userGroup: UserGroupUpdateManyWithoutUsersInput
  createUserGroup: UserGroupUpdateManyWithoutCreateUserInput
  privilegeUserGroup: UserGroupUpdateManyInput
  applyUserGroup: UserGroupUpdateManyWithoutApplyUsersInput
  problems: UserUpdateproblemsInput
  createProblmes: ProblemUpdateManyWithoutCreateUserInput
  submitRecord: SubmitUpdateManyWithoutUserInput
  submit: Int
  solved: Int
  accepted: Int
}

input UserUpdateManyDataInput {
  userId: String
  password: String
  status: Int
  level: Int
  name: String
  photo: String
  email: String
  desc: String
  integral: Int
  coin: Int
  defaultUserGroup: String
  defaultUserGroupId: String
  privilegeBlack: Int
  privilegeWhite: Int
  privilegeCache: Int
  problems: UserUpdateproblemsInput
  submit: Int
  solved: Int
  accepted: Int
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyMutationInput {
  userId: String
  password: String
  status: Int
  level: Int
  name: String
  photo: String
  email: String
  desc: String
  integral: Int
  coin: Int
  defaultUserGroup: String
  defaultUserGroupId: String
  privilegeBlack: Int
  privilegeWhite: Int
  privilegeCache: Int
  problems: UserUpdateproblemsInput
  submit: Int
  solved: Int
  accepted: Int
}

input UserUpdateManyWithoutApplyUserGroupInput {
  create: [UserCreateWithoutApplyUserGroupInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutApplyUserGroupInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutApplyUserGroupInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutPrivilegeGroupInput {
  create: [UserCreateWithoutPrivilegeGroupInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutPrivilegeGroupInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutPrivilegeGroupInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutUserGroupInput {
  create: [UserCreateWithoutUserGroupInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutUserGroupInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutUserGroupInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutCreateUserGroupInput {
  create: UserCreateWithoutCreateUserGroupInput
  update: UserUpdateWithoutCreateUserGroupDataInput
  upsert: UserUpsertWithoutCreateUserGroupInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutCreateProblmesInput {
  create: UserCreateWithoutCreateProblmesInput
  update: UserUpdateWithoutCreateProblmesDataInput
  upsert: UserUpsertWithoutCreateProblmesInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutSubmitRecordInput {
  create: UserCreateWithoutSubmitRecordInput
  update: UserUpdateWithoutSubmitRecordDataInput
  upsert: UserUpsertWithoutSubmitRecordInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutUserDiscussChilderInput {
  create: UserCreateWithoutUserDiscussChilderInput
  update: UserUpdateWithoutUserDiscussChilderDataInput
  upsert: UserUpsertWithoutUserDiscussChilderInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutUserDiscussInput {
  create: UserCreateWithoutUserDiscussInput
  update: UserUpdateWithoutUserDiscussDataInput
  upsert: UserUpsertWithoutUserDiscussInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateproblemsInput {
  set: [Json!]
}

input UserUpdateWithoutApplyUserGroupDataInput {
  userId: String
  password: String
  status: Int
  level: Int
  name: String
  photo: String
  email: String
  desc: String
  integral: Int
  coin: Int
  defaultUserGroup: String
  defaultUserGroupId: String
  privilegeBlack: Int
  privilegeWhite: Int
  privilegeCache: Int
  privilegeGroup: PrivilegeGroupUpdateManyWithoutUsersInput
  UserDiscuss: DiscussUpdateManyWithoutUserInput
  UserDiscussChilder: DiscussChilderUpdateManyWithoutUserInput
  userGroup: UserGroupUpdateManyWithoutUsersInput
  createUserGroup: UserGroupUpdateManyWithoutCreateUserInput
  privilegeUserGroup: UserGroupUpdateManyInput
  problems: UserUpdateproblemsInput
  createProblmes: ProblemUpdateManyWithoutCreateUserInput
  submitRecord: SubmitUpdateManyWithoutUserInput
  submit: Int
  solved: Int
  accepted: Int
}

input UserUpdateWithoutCreateProblmesDataInput {
  userId: String
  password: String
  status: Int
  level: Int
  name: String
  photo: String
  email: String
  desc: String
  integral: Int
  coin: Int
  defaultUserGroup: String
  defaultUserGroupId: String
  privilegeBlack: Int
  privilegeWhite: Int
  privilegeCache: Int
  privilegeGroup: PrivilegeGroupUpdateManyWithoutUsersInput
  UserDiscuss: DiscussUpdateManyWithoutUserInput
  UserDiscussChilder: DiscussChilderUpdateManyWithoutUserInput
  userGroup: UserGroupUpdateManyWithoutUsersInput
  createUserGroup: UserGroupUpdateManyWithoutCreateUserInput
  privilegeUserGroup: UserGroupUpdateManyInput
  applyUserGroup: UserGroupUpdateManyWithoutApplyUsersInput
  problems: UserUpdateproblemsInput
  submitRecord: SubmitUpdateManyWithoutUserInput
  submit: Int
  solved: Int
  accepted: Int
}

input UserUpdateWithoutCreateUserGroupDataInput {
  userId: String
  password: String
  status: Int
  level: Int
  name: String
  photo: String
  email: String
  desc: String
  integral: Int
  coin: Int
  defaultUserGroup: String
  defaultUserGroupId: String
  privilegeBlack: Int
  privilegeWhite: Int
  privilegeCache: Int
  privilegeGroup: PrivilegeGroupUpdateManyWithoutUsersInput
  UserDiscuss: DiscussUpdateManyWithoutUserInput
  UserDiscussChilder: DiscussChilderUpdateManyWithoutUserInput
  userGroup: UserGroupUpdateManyWithoutUsersInput
  privilegeUserGroup: UserGroupUpdateManyInput
  applyUserGroup: UserGroupUpdateManyWithoutApplyUsersInput
  problems: UserUpdateproblemsInput
  createProblmes: ProblemUpdateManyWithoutCreateUserInput
  submitRecord: SubmitUpdateManyWithoutUserInput
  submit: Int
  solved: Int
  accepted: Int
}

input UserUpdateWithoutPrivilegeGroupDataInput {
  userId: String
  password: String
  status: Int
  level: Int
  name: String
  photo: String
  email: String
  desc: String
  integral: Int
  coin: Int
  defaultUserGroup: String
  defaultUserGroupId: String
  privilegeBlack: Int
  privilegeWhite: Int
  privilegeCache: Int
  UserDiscuss: DiscussUpdateManyWithoutUserInput
  UserDiscussChilder: DiscussChilderUpdateManyWithoutUserInput
  userGroup: UserGroupUpdateManyWithoutUsersInput
  createUserGroup: UserGroupUpdateManyWithoutCreateUserInput
  privilegeUserGroup: UserGroupUpdateManyInput
  applyUserGroup: UserGroupUpdateManyWithoutApplyUsersInput
  problems: UserUpdateproblemsInput
  createProblmes: ProblemUpdateManyWithoutCreateUserInput
  submitRecord: SubmitUpdateManyWithoutUserInput
  submit: Int
  solved: Int
  accepted: Int
}

input UserUpdateWithoutSubmitRecordDataInput {
  userId: String
  password: String
  status: Int
  level: Int
  name: String
  photo: String
  email: String
  desc: String
  integral: Int
  coin: Int
  defaultUserGroup: String
  defaultUserGroupId: String
  privilegeBlack: Int
  privilegeWhite: Int
  privilegeCache: Int
  privilegeGroup: PrivilegeGroupUpdateManyWithoutUsersInput
  UserDiscuss: DiscussUpdateManyWithoutUserInput
  UserDiscussChilder: DiscussChilderUpdateManyWithoutUserInput
  userGroup: UserGroupUpdateManyWithoutUsersInput
  createUserGroup: UserGroupUpdateManyWithoutCreateUserInput
  privilegeUserGroup: UserGroupUpdateManyInput
  applyUserGroup: UserGroupUpdateManyWithoutApplyUsersInput
  problems: UserUpdateproblemsInput
  createProblmes: ProblemUpdateManyWithoutCreateUserInput
  submit: Int
  solved: Int
  accepted: Int
}

input UserUpdateWithoutUserDiscussChilderDataInput {
  userId: String
  password: String
  status: Int
  level: Int
  name: String
  photo: String
  email: String
  desc: String
  integral: Int
  coin: Int
  defaultUserGroup: String
  defaultUserGroupId: String
  privilegeBlack: Int
  privilegeWhite: Int
  privilegeCache: Int
  privilegeGroup: PrivilegeGroupUpdateManyWithoutUsersInput
  UserDiscuss: DiscussUpdateManyWithoutUserInput
  userGroup: UserGroupUpdateManyWithoutUsersInput
  createUserGroup: UserGroupUpdateManyWithoutCreateUserInput
  privilegeUserGroup: UserGroupUpdateManyInput
  applyUserGroup: UserGroupUpdateManyWithoutApplyUsersInput
  problems: UserUpdateproblemsInput
  createProblmes: ProblemUpdateManyWithoutCreateUserInput
  submitRecord: SubmitUpdateManyWithoutUserInput
  submit: Int
  solved: Int
  accepted: Int
}

input UserUpdateWithoutUserDiscussDataInput {
  userId: String
  password: String
  status: Int
  level: Int
  name: String
  photo: String
  email: String
  desc: String
  integral: Int
  coin: Int
  defaultUserGroup: String
  defaultUserGroupId: String
  privilegeBlack: Int
  privilegeWhite: Int
  privilegeCache: Int
  privilegeGroup: PrivilegeGroupUpdateManyWithoutUsersInput
  UserDiscussChilder: DiscussChilderUpdateManyWithoutUserInput
  userGroup: UserGroupUpdateManyWithoutUsersInput
  createUserGroup: UserGroupUpdateManyWithoutCreateUserInput
  privilegeUserGroup: UserGroupUpdateManyInput
  applyUserGroup: UserGroupUpdateManyWithoutApplyUsersInput
  problems: UserUpdateproblemsInput
  createProblmes: ProblemUpdateManyWithoutCreateUserInput
  submitRecord: SubmitUpdateManyWithoutUserInput
  submit: Int
  solved: Int
  accepted: Int
}

input UserUpdateWithoutUserGroupDataInput {
  userId: String
  password: String
  status: Int
  level: Int
  name: String
  photo: String
  email: String
  desc: String
  integral: Int
  coin: Int
  defaultUserGroup: String
  defaultUserGroupId: String
  privilegeBlack: Int
  privilegeWhite: Int
  privilegeCache: Int
  privilegeGroup: PrivilegeGroupUpdateManyWithoutUsersInput
  UserDiscuss: DiscussUpdateManyWithoutUserInput
  UserDiscussChilder: DiscussChilderUpdateManyWithoutUserInput
  createUserGroup: UserGroupUpdateManyWithoutCreateUserInput
  privilegeUserGroup: UserGroupUpdateManyInput
  applyUserGroup: UserGroupUpdateManyWithoutApplyUsersInput
  problems: UserUpdateproblemsInput
  createProblmes: ProblemUpdateManyWithoutCreateUserInput
  submitRecord: SubmitUpdateManyWithoutUserInput
  submit: Int
  solved: Int
  accepted: Int
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpdateWithWhereUniqueWithoutApplyUserGroupInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutApplyUserGroupDataInput!
}

input UserUpdateWithWhereUniqueWithoutPrivilegeGroupInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPrivilegeGroupDataInput!
}

input UserUpdateWithWhereUniqueWithoutUserGroupInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutUserGroupDataInput!
}

input UserUpsertWithoutCreateProblmesInput {
  update: UserUpdateWithoutCreateProblmesDataInput!
  create: UserCreateWithoutCreateProblmesInput!
}

input UserUpsertWithoutCreateUserGroupInput {
  update: UserUpdateWithoutCreateUserGroupDataInput!
  create: UserCreateWithoutCreateUserGroupInput!
}

input UserUpsertWithoutSubmitRecordInput {
  update: UserUpdateWithoutSubmitRecordDataInput!
  create: UserCreateWithoutSubmitRecordInput!
}

input UserUpsertWithoutUserDiscussChilderInput {
  update: UserUpdateWithoutUserDiscussChilderDataInput!
  create: UserCreateWithoutUserDiscussChilderInput!
}

input UserUpsertWithoutUserDiscussInput {
  update: UserUpdateWithoutUserDiscussDataInput!
  create: UserCreateWithoutUserDiscussInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueWithoutApplyUserGroupInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutApplyUserGroupDataInput!
  create: UserCreateWithoutApplyUserGroupInput!
}

input UserUpsertWithWhereUniqueWithoutPrivilegeGroupInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPrivilegeGroupDataInput!
  create: UserCreateWithoutPrivilegeGroupInput!
}

input UserUpsertWithWhereUniqueWithoutUserGroupInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutUserGroupDataInput!
  create: UserCreateWithoutUserGroupInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  userId: String
  userId_not: String
  userId_in: [String!]
  userId_not_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_gt: String
  userId_gte: String
  userId_contains: String
  userId_not_contains: String
  userId_starts_with: String
  userId_not_starts_with: String
  userId_ends_with: String
  userId_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  status: Int
  status_not: Int
  status_in: [Int!]
  status_not_in: [Int!]
  status_lt: Int
  status_lte: Int
  status_gt: Int
  status_gte: Int
  level: Int
  level_not: Int
  level_in: [Int!]
  level_not_in: [Int!]
  level_lt: Int
  level_lte: Int
  level_gt: Int
  level_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  photo: String
  photo_not: String
  photo_in: [String!]
  photo_not_in: [String!]
  photo_lt: String
  photo_lte: String
  photo_gt: String
  photo_gte: String
  photo_contains: String
  photo_not_contains: String
  photo_starts_with: String
  photo_not_starts_with: String
  photo_ends_with: String
  photo_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  desc: String
  desc_not: String
  desc_in: [String!]
  desc_not_in: [String!]
  desc_lt: String
  desc_lte: String
  desc_gt: String
  desc_gte: String
  desc_contains: String
  desc_not_contains: String
  desc_starts_with: String
  desc_not_starts_with: String
  desc_ends_with: String
  desc_not_ends_with: String
  integral: Int
  integral_not: Int
  integral_in: [Int!]
  integral_not_in: [Int!]
  integral_lt: Int
  integral_lte: Int
  integral_gt: Int
  integral_gte: Int
  coin: Int
  coin_not: Int
  coin_in: [Int!]
  coin_not_in: [Int!]
  coin_lt: Int
  coin_lte: Int
  coin_gt: Int
  coin_gte: Int
  defaultUserGroup: String
  defaultUserGroup_not: String
  defaultUserGroup_in: [String!]
  defaultUserGroup_not_in: [String!]
  defaultUserGroup_lt: String
  defaultUserGroup_lte: String
  defaultUserGroup_gt: String
  defaultUserGroup_gte: String
  defaultUserGroup_contains: String
  defaultUserGroup_not_contains: String
  defaultUserGroup_starts_with: String
  defaultUserGroup_not_starts_with: String
  defaultUserGroup_ends_with: String
  defaultUserGroup_not_ends_with: String
  defaultUserGroupId: String
  defaultUserGroupId_not: String
  defaultUserGroupId_in: [String!]
  defaultUserGroupId_not_in: [String!]
  defaultUserGroupId_lt: String
  defaultUserGroupId_lte: String
  defaultUserGroupId_gt: String
  defaultUserGroupId_gte: String
  defaultUserGroupId_contains: String
  defaultUserGroupId_not_contains: String
  defaultUserGroupId_starts_with: String
  defaultUserGroupId_not_starts_with: String
  defaultUserGroupId_ends_with: String
  defaultUserGroupId_not_ends_with: String
  privilegeBlack: Int
  privilegeBlack_not: Int
  privilegeBlack_in: [Int!]
  privilegeBlack_not_in: [Int!]
  privilegeBlack_lt: Int
  privilegeBlack_lte: Int
  privilegeBlack_gt: Int
  privilegeBlack_gte: Int
  privilegeWhite: Int
  privilegeWhite_not: Int
  privilegeWhite_in: [Int!]
  privilegeWhite_not_in: [Int!]
  privilegeWhite_lt: Int
  privilegeWhite_lte: Int
  privilegeWhite_gt: Int
  privilegeWhite_gte: Int
  privilegeCache: Int
  privilegeCache_not: Int
  privilegeCache_in: [Int!]
  privilegeCache_not_in: [Int!]
  privilegeCache_lt: Int
  privilegeCache_lte: Int
  privilegeCache_gt: Int
  privilegeCache_gte: Int
  privilegeGroup_every: PrivilegeGroupWhereInput
  privilegeGroup_some: PrivilegeGroupWhereInput
  privilegeGroup_none: PrivilegeGroupWhereInput
  UserDiscuss_every: DiscussWhereInput
  UserDiscuss_some: DiscussWhereInput
  UserDiscuss_none: DiscussWhereInput
  UserDiscussChilder_every: DiscussChilderWhereInput
  UserDiscussChilder_some: DiscussChilderWhereInput
  UserDiscussChilder_none: DiscussChilderWhereInput
  userGroup_every: UserGroupWhereInput
  userGroup_some: UserGroupWhereInput
  userGroup_none: UserGroupWhereInput
  createUserGroup_every: UserGroupWhereInput
  createUserGroup_some: UserGroupWhereInput
  createUserGroup_none: UserGroupWhereInput
  privilegeUserGroup_every: UserGroupWhereInput
  privilegeUserGroup_some: UserGroupWhereInput
  privilegeUserGroup_none: UserGroupWhereInput
  applyUserGroup_every: UserGroupWhereInput
  applyUserGroup_some: UserGroupWhereInput
  applyUserGroup_none: UserGroupWhereInput
  createProblmes_every: ProblemWhereInput
  createProblmes_some: ProblemWhereInput
  createProblmes_none: ProblemWhereInput
  submitRecord_every: SubmitWhereInput
  submitRecord_some: SubmitWhereInput
  submitRecord_none: SubmitWhereInput
  submit: Int
  submit_not: Int
  submit_in: [Int!]
  submit_not_in: [Int!]
  submit_lt: Int
  submit_lte: Int
  submit_gt: Int
  submit_gte: Int
  solved: Int
  solved_not: Int
  solved_in: [Int!]
  solved_not_in: [Int!]
  solved_lt: Int
  solved_lte: Int
  solved_gt: Int
  solved_gte: Int
  accepted: Int
  accepted_not: Int
  accepted_in: [Int!]
  accepted_not_in: [Int!]
  accepted_lt: Int
  accepted_lte: Int
  accepted_gt: Int
  accepted_gte: Int
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  userId: String
}
`